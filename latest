# shellcheck shell=sh disable=SC3043 # xrc
# author:       Li Junhao           l@x-cmd.com

# Section: log main
___x_cmd_log() {
    if [ $# -eq 0 ]; then
        ___x_cmd_log -h
        return
    fi

    case "$1" in
        help|-H|-h|--help)
            ___x_cmd_log_help
            return 1 ;;
        init)
            [ $# -gt 0 ] && shift
            ___x_cmd_log_init "$@"
            return ;;
        timestamp)
            [ $# -gt 0 ] && shift
            ___x_cmd_log_timestamp "$@"
            return ;;

    esac

    local level
    local level_code
    local var
    while [ $# -gt 0 ]; do
        case "$1" in
            -*)
                logger="${1#-}"
                ___x_cmd_log_set_level "$logger" info 1
                ;;
            +*)
                logger="${1#+}"
                ___x_cmd_log_set_level "$logger" debug 0
                ;;
            *)
                level="${1#*/}"
                logger="${1%/*}"
                case "$level" in
                    debug|dbg|verbose|v)        level=debug;    level_code=0 ;;
                    info|INFO|i)                level=info;     level_code=1 ;;
                    warn|WARN|w)                level=warn;     level_code=2 ;;
                    error|ERROR|e)              level=error;    level_code=3 ;;
                    none|n|no)                  level=none;     level_code=4 ;;
                    *)                          level=debug;    level_code=0 ;;
                esac
                ___x_cmd_log_set_level "$logger" "$level" "$level_code"
        esac
        shift
    done
}
# EndSection

# Section: init set_level help

___x_cmd_log_init(){
    local logger_name="${1}"

    local var="XRC_LOG_LEVEL_${logger_name}"
    eval "${logger_name}_log(){     O=$logger_name ___x_cmd_logger \"\$@\";   }"
    ___x_cmd_log_set_level "$logger_name" info 1
}

___x_cmd_log_timestamp(){
    local arg="${1:?Provide timestamp}"
    case "$arg" in
        on)     XRC_LOG_TIMESTAMP="+%H:%M:%S";      return 0   ;;
        off)    XRC_LOG_TIMESTAMP= ;                return 0   ;;
        *)      printf "Try customized timestamp format wit date command:\n"
                if date "$arg"; then
                    XRC_LOG_TIMESTAMP="$arg"
                    return 0
                fi
                return 1    ;;
    esac
}

___x_cmd_log_set_level(){
    local logger_name="${1:?Provide loggername}"
    local level="${2:?Provide level}"
    local level_code="${3:?Provide level code}"

    local var="XRC_LOG_LEVEL_${logger_name}"
    eval "$var=$level_code"

    local level_name
    local on=
    for level_name in debug info warn error; do
        [ "$level_name" = "$level" ] && on=1
        if [ -z "$on" ]; then
            alias "${logger_name}:${level_name}"=" : # "
        else
            alias "${logger_name}:${level_name}"="${logger_name}_log ${level_name}"
        fi
    done

    O="$logger_name" ___x_cmd_logger info "Level of logger [$logger_name] is set to [$level]"
}

___x_cmd_log_help(){
    cat >&2 <<A
x log     log control facility
    Usage:
        x log init [ module ]
        x log [... +module | -module | module/log-level ]
Subcommand:
    init <module>:                  Generate function '<module>_log'
    timestamp < on | off | <format> >:
                                    off, default setting. shutdown the timestamp output in log
                                    on, default format is +%H:%M:%S
                                    <format>, customized timestamp format like "+%H:%M:%S", "+%m/%d-%H:%M:%S"
Example:
    Enable debug log for module json:
            x log +json          or   x log json
            x log json/verbose   or   x log json/v
            x log json/debug     or   x log json/d
    Dsiable debug log for module json:
            x log -json
            x log json/info
A

}

# EndSection

# Section: logger
# TODO: To move xrc_log
XRC_LOG_COLOR=1
XRC_LOG_TIMESTAMP=      # "+%H:%M:%S"      # Enable Timestamp.

# TODO: rename to ___x_cmd_log_logger
___x_cmd_logger(){
    local logger="${O:-DEFAULT}"
    local IFS=
    local level="${1:?Please provide logger level}"

    local color="\e[32;2m"
    local level_code=0
    case "$level" in
        debug|DEBUG|verbose)    level="DBG";    shift ;;
        info|INFO)              level="INF";    level_code=1;   color="\e[36m";     shift ;;
        warn|WARN)              level="WRN";    level_code=2;   color="\e[33m";     shift ;;
        error|ERROR)            level="ERR";    level_code=3;   color="\e[31m";     shift ;;
        *)                      level="DBG"     ;;
    esac

    local var="XRC_LOG_LEVEL_${logger}"

    eval "[ $level_code -lt \"\${${var}:-1}\" ]" && return 0

    local timestamp=
    [ -n "$XRC_LOG_TIMESTAMP" ] && timestamp=" [$(date "${XRC_LOG_TIMESTAMP}")]"

    if [ -n "$XRC_LOG_COLOR" ]; then

        if [ $# -eq 0 ]; then
            printf "${color}%s[%s]${timestamp}: " "$logger" "$level"
            cat | awk 'NR==1{ print($0) }; NR>=2{ print("> " $0); }; END{ printf("%s", "\033[0m"); }'
        else
            printf "${color}%s[%s]${timestamp}: %s\e[0m\n" "$logger" "$level" "$*"
        fi
    else
        if [ $# -eq 0 ]; then
            printf "%s[%s]${timestamp}: " "$logger" "$level"
            cat | awk 'NR==1{ print($0) }; NR>=2{ print("> " $0); }; }'
        else
            printf "%s[%s]${timestamp}: %s\n" "$logger" "$level" "$*"
        fi
    fi >&2
}
# EndSection

# Section: completer, Maybe we can use advise.json to replace it for advise module can support the following function.
# shellcheck disable=SC3010,SC2154
___x_cmd_log_completer(){

    case "$cur" in
        "")
            printf "%s\n" "+"
            printf "%s\n" "-"
            ls "$___X_CMD_ROOT" | grep -v BASE64  | awk '{ print $0 "/"; }'
            ;;
        */*)
            printf "%s\n" "${cur%/*}/debug"
            printf "%s\n" "${cur%/*}/verbose"
            printf "%s\n" "${cur%/*}/warn"
            printf "%s\n" "${cur%/*}/error"
            ;;
        +*)   ls "$___X_CMD_ROOT" | grep -v BASE64 | awk '{ print "+" $0; }' ;;
        -*)   ls "$___X_CMD_ROOT" | grep -v BASE64 | awk '{ print "-" $0; }' ;;
        *)
            ls "$___X_CMD_ROOT" | grep -v BASE64 | awk -v cur="$cur" '
    BEGIN { arr_len=0; }
    $0~"^"cur{
        arr_len += 1
        arr[arr_len] = $0;
        if ( $0 !~ /\/$/ ) arr[arr_len] = arr[arr_len] "/"
    }
    END {
        if (arr_len != 1) {
            for (i=1; i<=arr_len; ++i) print arr[i]
        } else {
            # It is useful! The completion seemed to pause before "/"
            print arr[1] "verbose"
            print arr[1] "debug"
            print arr[1] "warn"
            print arr[1] "error"
        }
    }
'
            ;;
    esac
}
# EndSection


xrc setmain ___x_cmd_log
