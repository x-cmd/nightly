# shellcheck shell=sh disable=SC2039,SC2142,SC3043

param_type_unset    paramtest

# param_type    paramtest     mline_arg_type  "=~"  "[A-Za-z0-9_\\n]+"
param_type    paramtest     access          "="   "private"         "public"          "inner-public"
param_type    paramtest     url_type        "=~"  "https?://.+"
param_type    paramtest     atlist_type     "=~"  "[-0-9,]+"

paramtest(){
    param:plugin    "paramtest"
    param:scope     "paramtest/$O"
    param:dsl  <<A
subcommand:
    option|op-test  "Test option"
    subcmd          "Test subcommand"
    marg            "Test multiple argement"
    rarg            "Test rest argement"
    namelist        "Test name list"
    snl             "Test small name list"
    advise_null     "Test advise null"
    subcmd_null     "Test subcommand null"
options:
    --candi_null    "Test null option to use candidate"  <candi_null>:candis="abc"        =  abc  cde     def
A
    param:run

    if [ -z "$PARAM_SUBCMD" ]; then
        echo "candi_null: $candi_null"
        echo "rest argument $1"
        return 0
    fi

    paramtest_"${PARAM_SUBCMD}" "$@"
}

paramtest_option(){
    param:scope     "paramtest/$O"
    param:dsl      <<A
type:
    access  =   private public
    repo_t  =~  "cde"   "def"
advise:
    repo  list_repo all
    #1    list_repo
option:
    --mul_line_arg|-m       "Test multiple line argument"            <mline_arg>:mline_arg_type
    --regex_arg1            "Test an argument with regex 1"          <>=0     =~  [0-9]*
    --regex_arg2            "Test an argument with regex 2"          <>=20    =~  ([1-9]?[0-9]|100)
    --repo|-r               "Provide repo name"                      <>:repo_type   =~  "abc"   "cde"   "def"
    --repo2|-b|m            "Provide two repo name"
        <arg1>:repo_type=""               =   "abc"   "cde"   "def"
        <arg2>:repo_t=
    --priviledge|-p         "Provide privilidge"                     <priviledge_type>:access=private
    --no_type_arg|-n        "Test no type argument but have default" <no_type_arg>=default
    --flag1|-f              "Flag1 that you can use \\\$\{flag1:-false} to get the bool value"
    --flag1222|-g           "Flag1222 that you can use \\\$\{flag1222:-false} to get the bool value"
    #1                      "Test rest argument #1 when exist option and flag"
    #222222                 "Provide number #2"
    #3                      "Provide number #3"
A
    param:run
    echo "regex_arg1: $regex_arg1"
    echo "regex_arg2: $regex_arg2"
    echo "param repo: $repo"
    echo "param repo2: $repo2_n  $repo2_1_1 $repo2_1_2"
    echo "param priviledge: $priviledge"
    echo "param no_type_arg: $no_type_arg"
    echo "multiple line argument: $mul_line_arg"
    echo "flag1: ${flag1:-false}"
    echo "flag1222: ${flag1222:-false}"
    echo "rest argument: $1"
}

paramtest_subcmd(){
    param:scope     "paramtest/$O"
    param:dsl       '
subcommand:
    sscmd1|s1|s-s1|longlongsubcommand   "Test sub sub command1"
    sscmd2                              "Test sub sub command2"
    subcmd_null                         "Test 2 subcommand null"
'
    param:run
    paramtest_subcmd_"${PARAM_SUBCMD}" "$@"
}

paramtest_subcmd_sscmd1(){
    param:scope     "paramtest/$O"
    param:dsl       '
subcommand:
    subcmd_null        "Test 3 subcommand null"
options:
    --ss1_opt1|-s      "Test sub sub command1 option1"
    --ss1_opt2|-d      "Test sub sub command1 option2"
    --ss1_opt3|-f      "Test sub sub command1 option3"
'
    param:run
    echo "sscmd1:${PARAM_SUBCMD}"
    echo "param sscmd1_opt1: $ss1_opt1"
}

test_subcmd(){
    @assert stdout "O=xxxx; paramtest subcmd sscmd1 -s"<<A
sscmd1:
param sscmd1_opt1: true
A
}

test_alias_subcmd(){
    @assert stdout "O=xxxx; paramtest op-test --repo abc -b abc cde -m aaa dddd"<<A
regex_arg1: 0
regex_arg2: 20
param repo: abc
param repo2: 1  abc cde
param priviledge: private
param no_type_arg: default
multiple line argument: aaa
flag1: false
flag1222: false
rest argument: dddd
A
    # FIXME: Testcase for discription was ""
}

@assert:file:func