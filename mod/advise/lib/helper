
# Section : adviser helper function: ls lsd seq get_result

___advise_lsd(){
    local l
    local localdir="${1:-${cur:-""}}"
    compgen -d "${localdir}" 2>/dev/null | while read -r l; do
        printf "%s/\n" "${l%/}"
    done
}

___advise_ls_grep(){
    local localopt="${1:-${cur:-""}}"
    ls | grep -E "${localopt}" 2>/dev/null
}

___advise_ls(){
    local localdir="${1:-${cur:-""}}"

    if [ -z "$localdir" ]; then
        ls
        return
    fi

    if [ "${localdir%/*}" = "${localdir}" ]; then
        folder=""
        pattern="${localdir}"

    else
        folder="${localdir%/*}"
        pattern="${localdir##*/}"
    fi

    ls "${folder:-.}" | awk -v folder="$folder" -v pattern="$pattern" 'match($0, "^" pattern){
        if (folder == "") {
            print $0
        } else {
            print folder "/" $0
        }
    }' 2>/dev/null
}

# 1-10
___advise_seq(){
    local cur="${cur:-""}"
    awk -v range="$1" -v cur="$cur" '
function inside(num, start, end, step){
    if ( (num < start) || (num > end) ) return 0
    if ( ( num - start ) % step == 0 ) return 1
    return 0
}

BEGIN{

    arr_len = split(range, arr, /\//)
    start = arr[1]
    end = arr[2]
    step = arr[3]
    if (step == "") step = 1

    num = (end - start + 1) / step
    if (num < 16) {
        for (i=start; i<=end; i=i+step) print i
        exit(0)
    }

    if (cur !~ /[0-9]+/) {
        exit(0)
    }

    if (inside(cur, start, end, step) == 1) print cur

    cur = cur * 10
    for (i=0; i<=9; ++i) {
        newnum = cur + i
        if (inside(newnum, start, end, step) == 1) print newnum
    }
}
' <<A
A

}

___x_cmd_advise_get_result(){
    local offset="${1:-1}"
    local remain_len=$((COMP_CWORD-offset))
    [ -n "$ZSH_VERSION" ] && offset=$((offset+1)) && setopt aliases

    local module="${COMP_WORDS[offset]}"
    local which_one_result
    which_one_result="$(xrc which "$module")"
    [ -n "$which_one_result" ] || return

    local main_func
    main_func="$(___x_cmd_ldict_get ___X_CMD_XRC_SET_MAIN_DICT "$which_one_result")"

    # Generate the advise json file.
    if [ -z "$main_func" ]; then
        ___x_cmd_xrc_source_file_main "$which_one_result"
        main_func="$(___x_cmd_ldict_get ___X_CMD_XRC_SET_MAIN_DICT "$which_one_result")"
    fi

    ___advise_main "$main_func"
    local filepath="${TMPDIR%/}/.x-cmd/advise_auto_json/$main_func"
    [ -f "$filepath" ] || return

    # Delete $offset numbers from the COMP_WORDS
    local i tmp=()
    for ((i=0; i<=remain_len; ++i)); do
        tmp+=( "${COMP_WORDS[i+offset]}" )
    done
    COMP_WORDS=("${tmp[@]}")
    COMP_CWORD="$(( ${#tmp[@]}-1 ))"
    ___advise_get_result_from_awk
}

## EndSection
