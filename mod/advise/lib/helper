# shellcheck disable=SC2207,SC2034
# Section : adviser helper function: ls lsd seq get_result

___x_cmd_advise__ls(){
    candidate_exec_arr=( $(ls "$@") )
}

___x_cmd_advise__dir(){
    local localdir="${1:-${cur:-""}}"
    if [ -n "$ZSH_VERSION" ]; then
        _path_files -/
        return
    fi
    ___x_cmd_advise_set_nospace
    candidate_exec_arr=( $(compgen -d "$localdir" 2>/dev/null) )
}

# TODO: same as _files
___x_cmd_advise__file(){
    local localdir="${1:-${cur:-""}}"
    if [ -n "$ZSH_VERSION" ]; then
        _files
        return
    fi
    ___x_cmd_advise_set_nospace
    candidate_exec_arr=( $(compgen -f "$localdir" 2>/dev/null) )
}

___x_cmd_advise_set_nospace(){
    if [[ ! "$BASH_VERSION" =~ ^3.* ]];then
        compopt -o nospace
    fi
    # TODO: ZSH complete no add space
    if [ -n "$ZSH_VERSION" ]; then
        zstyle ':completion:*' add-space false
        # zstyle ':completion:*' insert-tab false
    fi
}
# 1-10
___x_cmd_advise__seq(){
    local cur="${cur:-""}"
    candidate_exec_arr=( $(awk -v range="$1" -v cur="$cur" '
function inside(num, start, end, step){
    if ( (num < start) || (num > end) ) return 0
    if ( ( num - start ) % step == 0 ) return 1
    return 0
}

BEGIN{

    arr_len = split(range, arr, /\//)
    start = arr[1]
    end = arr[2]
    step = arr[3]
    if (step == "") step = 1

    num = (end - start + 1) / step
    if (num < 16) {
        for (i=start; i<=end; i=i+step) print i
        exit(0)
    }

    if (cur !~ /[0-9]+/) {
        exit(0)
    }

    if (inside(cur, start, end, step) == 1) print cur

    cur = cur * 10
    for (i=0; i<=9; ++i) {
        newnum = cur + i
        if (inside(newnum, start, end, step) == 1) print newnum
    }
}
' <<A
A
    ))

}

___x_cmd_advise__get_result(){
    local offset="${1:-1}"
    local remain_len=$((COMP_CWORD-offset))
    [ -n "$ZSH_VERSION" ] && offset=$((offset+1)) && setopt aliases

    local module="${COMP_WORDS[offset]}"
    local which_one_result
    which_one_result="$(xrc which "$module")"
    [ -n "$which_one_result" ] || return

    local main_func
    main_func="$(___x_cmd_ldict_get ___X_CMD_XRC_SET_MAIN_DICT "$which_one_result")"

    # Generate the advise json file.
    if [ -z "$main_func" ]; then
        ___x_cmd_xrc_source_file_main "$which_one_result"
        main_func="$(___x_cmd_ldict_get ___X_CMD_XRC_SET_MAIN_DICT "$which_one_result")"
    fi

    ___advise_main "$main_func"
    local filepath="${TMPDIR%/}/.x-cmd/advise_auto_json/$main_func"
    [ -f "$filepath" ] || return

    # Delete $offset numbers from the COMP_WORDS
    local i tmp=()
    for ((i=0; i<=remain_len; ++i)); do
        tmp+=( "${COMP_WORDS[i+offset]}" )
    done
    COMP_WORDS=("${tmp[@]}")
    COMP_CWORD="$(( ${#tmp[@]}-1 ))"

    candidate_exec=
    eval "$(___advise_get_result_from_awk)" 2>/dev/null
    local IFS=$'\n'
    eval "$candidate_exec" 2>/dev/null
}

## EndSection
