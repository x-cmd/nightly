# shellcheck shell=sh disable=SC2039,SC1090,SC3043,SC2263    # xrc
xrc jawk

 # Section: utils
___x_cmd_env_deno_get_system_platform(){
    xrc os
    local _platform
    local _arch
    local _compression
    local ___X_CMD_ENV_PLATFORM
    _platform="$(x os name)"
    _arch="$(x os arch)"
    if [  "$_platform" = "win" ] ; then
        ___X_CMD_ENV_ARCH="x86_64-pc-windows-msvc"
    fi
    if [ "$_platform" = "darwin" ] ; then
            case "$_arch" in
                arm64)      ___X_CMD_ENV_ARCH="aarch64-apple-darwin"   ;;
                x64)        ___X_CMD_ENV_ARCH="x86_64-apple-darwin"    ;;
                *)          env:error "your arch:(" "$_arch" ") are not supported"
                            return 1
                            ;;
            esac
    fi
    if [ "$_platform" = "linux" ] ; then
        ___X_CMD_ENV_ARCH="x86_64-unknown-linux-gnu"
    fi
    if [ "$_platform" != "linux" ] && [ "$_platform" != "darwin" ] && [  "$_platform" != "win" ] ; then
        env:error "your OS:(" "$_platform" ") are not supported"
    fi
}
# EndSectionï¼›

# Section: ls, la
___x_cmd_env_deno_ls_remote(){
    local cache="$___X_CMD_ENV_PATH/deno/cache/version_list"
    local cache_expiration="${2:-1}"
    ___x_cmd_httpget "https://api.github.com/repos/denoland/deno/releases" "$cache" "$cache_expiration" && \
        ja 'k()=="tag_name"{ print substr(v(),2); }' <"$cache"
}

# EndSection

___x_cmd_env_deno_download_archive(){
    local version="${1:?""}"
    local ___X_CMD_ENV_ARCH
    ___x_cmd_env_deno_get_system_platform
    if ___x_cmd_env_util_is_archive_cached deno "$version" 2>/dev/null; then
        env:info "Archive existed: $version"
        return 0
    fi
    if [ $# -eq 0 ]; then
        download_url="https://github.com/denoland/deno/releases/latest/download/deno-${___X_CMD_ENV_ARCH}.zip"
    else
        download_url="https://github.com/denoland/deno/releases/download/v${version}/deno-${___X_CMD_ENV_ARCH}.zip"
    fi
    env:info "Downloading deno ${download_url}"
    local archive_path="$___X_CMD_ENV_PATH/deno/archive/deno-${version}.zip"
    mkdir -p "$(dirname "$archive_path")"
    if ! curl --progress-bar --location --retry-max-time 10 --retry 0 "$download_url" --output "$archive_path" ; then
        env:error "Download failure from $download_url"
        return 1
    fi
        env:info "Download Successfully"
}

___x_cmd_env_deno_unpack(){
    local version="${1:?Provide a version}"
    env:info "Unpacking: deno ${version}"
    local archive_path="$___X_CMD_ENV_PATH/deno/archive/deno-$version.zip"
	x uz "$archive_path" "$(dirname "$archive_path")" || return 1
    local archive_unpack_files
    archive_unpack_files="$(dirname "$archive_path")/deno"
    local versions_path="$___X_CMD_ENV_PATH/deno/versions"
	mkdir -p "$versions_path/${version}/bin"
    mv -f "$archive_unpack_files" "${versions_path}/${version}/bin"
    rm -rf "$archive_unpack_files"
}
