# shellcheck shell=sh disable=SC2039,SC1090,SC3043,SC2263,SC2120    # xrc

# Section(util): get_system_arch compression

___x_cmd_env_go_get_system_arch(){
    x incase_ "$(x os name)" linux:linux win:windows darwin:darwin || \
        { env:error "your system:($(x os name)) are not supported" && return 1; }
    system="$___X_CMD_CASE_RESULT"

    x incase_ "$(x os arch)" x86:386 x64:amd64 arm64:arm64 armv7l:armv6l ARMv6:armv6l || \
        { env:error "your arch:($(x os arch)) are not supported" && return 1; }
    arch="$___X_CMD_CASE_RESULT"
}

___x_cmd_env_go_compression(){
    x ifelse '[ "$(x os name)" = win ]' zip tar.gz
}

## EndSection

# Section(ls_remote): list_url, version_info

___x_cmd_env_go_list_url(){
    printf "https://golang.google.cn/dl/"
}

___x_cmd_env_go_version_info(){
    local system; local arch
    ___x_cmd_env_go_get_system_arch
    env:debug "system:($system) arch:($arch)"

    awk -v sys="$system" -v arch="$arch" -v pattern="${pattern}" \
    'match($0, "/dl/go[0-9.]+" sys "-" arch ) {
        match($0, "/dl/go[0-9.]+")
        version = substr($0, RSTART+6, RLENGTH-7)
        if (version ~ pattern) { print version }
    }'
}

## EndSection

# Section(download): download_url
___x_cmd_env_go_download_url(){
    local version="${1:?Provide a version}"
    local system; local arch;
    ___x_cmd_env_go_get_system_arch || return 1
    printf "https://golang.google.cn/dl/go%s.%s-%s.%s" "$version" "$system" "$arch" "$(___x_cmd_env_go_compression)"
}

## EndSection

# Section: catsel
___x_cmd_env_go_ui_catsel(){
    case "$#" in
        0)  ___x_cmd_env_go_ls_remote | awk '{ split($0,arr,"."); vmap[arr[1]]=1 } END{ for(key in vmap){print key} }' ;;
        1)  ___x_cmd_env_go_ls_remote | grep ^"$1" | awk '{ print $0 }' ;;
    esac
}

## EndSection