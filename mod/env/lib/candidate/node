# shellcheck shell=sh disable=SC2039,SC1090,SC3043,SC2263,SC2120    # xrc

___X_CMD_ENV_NODE_MIRROR="https://nodejs.org/dist"

# Section(util):  compression

___x_cmd_env_node_compression(){
    case "$(x os name)" in
        win)        printf 'zip'   ;;
        *)          printf 'tar.gz';;
    esac
}

# EndSection

# Section(ls_remote): list_url, version_info

___x_cmd_env_node_list_url(){
    printf "%s" "$___X_CMD_ENV_NODE_MIRROR/index.tab"
}

___x_cmd_env_node_version_info(){
    awk -v pattern="$pattern" -v prev_codename="x-cmd" '
        ((NR>1)&&($1)){
            codename=$10
            version=$1
            if ( version ~ pattern ) {
                if (codename ~ /^\-?$/)                                 print version
                else if (codename!="" && codename != prev_codename)     print version, codename, "*"        # The latest version of this code name
                else                                                    print version, codename
            }
            prev_codename=codename
        }'
}

# EndSection

# Section(download): download_url

___x_cmd_env_node_download_url(){
    local version="${1:?Provide node version}"
    local system
    local arch
    {
        read -r system
        read -r arch
    } <<A
$(x os name; x os arch)
A

    # TODO: Consider use config instead of code in the future
    local version_without_v="${version#v}"
    if [ "$system-$arch" = "darwin-arm64" ] && [ "${version_without_v%%.*.*}" -lt 16 ]; then
        env:warn "You are using darwin arm64, but node $version is not available for this platform. (node < 16.x)"
        env:warn "Use x86_64 instead."
        arch="x64"
    fi
    # TODO: node <= 0.1.13 does not have a directory
    local slug="node-$version-$system-$arch"
    printf "%s/%s/%s.%s" "${___X_CMD_ENV_NODE_MIRROR}" "$version" "${slug}" "$(___x_cmd_env_node_compression)"
}
# EndSection

# Section copy to unpackdir
___x_cmd_env_node_copy_to_unpackdir(){
    if [ $(x os name) = "win" ] ; then
    (
        cd "${unpack_dir}"/*/ && chmod +x node.exe npm npx
        mkdir -p "${unpack_dir}/tmp/bin"
        mv -f "$PWD"/* "${unpack_dir}/tmp/bin"
        x rmrf "$PWD"
    )
    fi
}
#EndSection

# Section: ui_catsel

#TODO: Should be optimized
___x_cmd_env_node_ui_catsel(){
    case "$#" in
        0)  ___x_cmd_env_node_ls_remote | awk '{ split($0,arr," "); if(arr[2]!=""){ vmap[arr[2]]=1 }else if(arr[2]==""){ split(arr[1],varr,"."); vmap[varr[1]]=1 } } END{ for(key in vmap){ print key } }' ;;
        1)  ___x_cmd_env_node_ls_remote | grep "$1" | awk '{ split($0,arr,"."); vmap[arr[1]]=1 } END{ for(key in vmap){print key} }' ;;
        2)  ___x_cmd_env_node_ls_remote | grep "$1" | grep "$2" | awk -v a="$1" -v b="$2" '{ if( a != b){ print $1 }else{ split($0,arr," "); if(arr[2]==""){ vmap[arr[1]]=1 } } } END{ for(key in vmap){ print key } }' ;;
    esac
}

# EndSection