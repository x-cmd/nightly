

___x_cmd_pkg(){
    local op="$1"
    case "$op" in
        ls)     ___x_cmd_pkg_ls "$@" ;;
    esac
}

___X_CMD_PKG_RAWPATH="$___X_CMD_ROOT_TMP/env/raw"

x log init pkg


___x_cmd_pkg_post_script(){
    local pkg_name="${1:?Provide pkg name}"
    local osarch="${2:?osarch as filter}"
    local version="${3:?rovide version}"
}


# _bin_url__
# _bin_url_cn
___x_cmd_pkg___bin_url(){
    local pkg_name="${1:?Provide pkg name}"
    local osarch="${2:?osarch as filter}"
    local version="${3:?rovide version}"

    local url_list
    url_list="$(___x_cmd_pkg___all_info "${pkg_name}" | awk \
        -f "$___X_CMD_ROOT_MOD/awk/lib/default.awk" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/jqparse.awk" \
        -f "pkg.jobj.awk" \
        -f "pkg.lsversion.awk")"

    local url
    while read -r url; do
        :
    done <<A
$url_list
A

}

___x_cmd_pkg___ls_local(){
    local pkg_name="${1:?Provide pkg name}"
    local osarch="${2:?osarch as filter}"
    ___x_cmd_pkg___all_info "${pkg_name}" | awk \
        -f "$___X_CMD_ROOT_MOD/awk/lib/default.awk" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/jqparse.awk" \
        -f "pkg.jobj.awk" \
        -f "pkg.lsversion.awk"
}

# Control the lsversion awk for better showing
___x_cmd_pkg___ls_version(){
    local pkg_name="${1:?Provide pkg name}"
    local osarch="${2:?osarch as filter}"
    ___x_cmd_pkg___all_info "${pkg_name}" | awk \
        -f "$___X_CMD_ROOT_MOD/awk/lib/default.awk" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/jqparse.awk" \
        -f "pkg.jobj.awk" \
        -f "pkg.lsversion.awk"
}

___x_cmd_pkg___awk(){
    # ___x_cmd_pkg___all_info "${FP:-nmap}" | awk \
    #     -f "$___X_CMD_ROOT_MOD/awk/lib/default.awk" \
    #     -f "$___X_CMD_ROOT_MOD/awk/lib/jqparse.awk" \
    #     -f "$___X_CMD_ROOT_MOD/env/lib/pkg/pkg.jobj.awk"

    ___x_cmd_pkg___all_info "${FP:-nmap}" | awk \
        -f "$___X_CMD_ROOT_MOD/awk/lib/default.awk" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/jqparse.awk" \
        -f "pkg.jobj.awk" \
        -f "pkg.url.awk"
}

# Section: get from env.7z
___x_cmd_pkg___which_p7zip(){
    ___x_cmd_ensuredir "$___X_CMD_PKG_RAWPATH"

    local p7zip="$___X_CMD_ROOT_TMP/env/env.7z"
    if ! ___x_cmd_httpget_gitx x-cmd env main "dist/env.7z" "$p7zip" 3600; then # 1-day
        if [ ! -f "$p7zip" ]; then
            x:error "Unaviable env.7z. Unable to fetch env.7z."
            return 1
        fi
    fi

    [ "$___X_CMD_HTTPGET_AGE" != 0 ] || (
        pkg:info "Deflate the env.7z"
        x rmrf "$___X_CMD_PKG_RAWPATH"
        ___x_cmd_ensuredir "$___X_CMD_PKG_RAWPATH"
        cd ${p7zip%/*} && cp env.7z raw/env.7z && cd raw && x uz env.7z 2>/dev/null && rm env.7z
    )
}


___x_cmd_pkg_ls()(
    ___x_cmd_pkg___which_p7zip || return

    cd "$___X_CMD_PKG_RAWPATH"
    find . -name meta.tt.json | awk  '{ gsub(/\.\//, "", $0); gsub(/\/meta.tt.json$/, "", $0); print $0;  }'
)
# EndSection

# Section: get raw text from env.7z
___x_cmd_pkg_locate(){
    local tgt="${1:?Provide name}"
    ___x_cmd_pkg_ls | awk -v FS=/ -v tgt="$tgt" '$2==tgt{ print $0; exit 0; }'
}

___x_cmd_pkg___meta_fp(){
    local s
    s="$(___x_cmd_pkg_locate "${1:?Provide name}")" || return
    printf "%s/%s/meta.tt.json" "$___X_CMD_PKG_RAWPATH" "$s"
}

___x_cmd_pkg___version_fp(){
    local s
    s="$(___x_cmd_pkg_locate "${1:?Provide name}")" || return
    printf "%s/%s/version.tt.json" "$___X_CMD_PKG_RAWPATH" "$s"
}

# Default, China
___x_cmd_pkg___all_info(){
    local s
    s="$___X_CMD_PKG_RAWPATH/$(___x_cmd_pkg_locate "${1:?Provide name}")" || return
    printf "%s\n" "$1"
    cat "$s/meta.tt.json" "$s/version.tt.json"
}
# EndSection

