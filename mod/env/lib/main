
___x_cmd_env_get_version(){
    local pkg_name="${1%=*}"
    local version="${1#*=}"
    if [ "$version" != "$pkg_name" ]; then
        printf "%s\n" "$version"
    else
        x pkg default_version "$pkg_name"
    fi
}

___x_cmd___env_pasre__pkg__version(){
    case "$1" in
        *=-)
            ___X_CMD___ENV_PARSE_PKG="${1%=-}"
            ___x_cmd_env_prev_ "${1%=-}"
            ___X_CMD___ENV_PARSE_VERSION="$___X_CMD_ENV_PREV_"
            ;;
        *=*)
            ___X_CMD___ENV_PARSE_PKG="${1%=*}"
            ___X_CMD___ENV_PARSE_VERSION="${1#*=}"
            ;;
        *)
            ___X_CMD___ENV_PARSE_PKG="${1}"
            ___X_CMD___ENV_PARSE_VERSION="$(x pkg default_version "$1")"
    esac
}

# try = install + activate
___x_cmd_env_try(){
    x:trace env/try

    local i
    for i in "$@"; do
        pkg:info "Prepare ${i%=*} $(___x_cmd_env_get_version "$i")"
        if ! x pkg install "${i%=*}" "$(___x_cmd_env_get_version "$i")"; then
            pkg:error "Cannot install package: $i"
            return 1
        fi
    done

    local ___X_CMD___ENV_PARSE_PKG
    local ___X_CMD___ENV_PARSE_VERSION
    for i in "$@"; do
        ___x_cmd___env_store_prev "$i"
        x pkg activate "$___X_CMD___ENV_PARSE_PKG" "$___X_CMD___ENV_PARSE_VERSION"
        ___x_cmd___env_store_current "$___X_CMD___ENV_PARSE_PKG" "$___X_CMD___ENV_PARSE_VERSION"
    done

    local ___X_CMD_ENV___CONFIGSTR_SET_
    ___x_cmd_env___configstr_set_ "$___X_CMD_ENV___CONFIGSTR_SET_" "$@"
    ___X_CMD_ENV_VERSION_CONFIG="$___X_CMD_ENV___CONFIGSTR_SET_"
}

# use = try + save-config
___x_cmd_env_use(){
    x:trace env/use
    ___x_cmd_env_try "$@" || return

    ___x_cmd_env_configfile_set "$@"
}

# TODO
___x_cmd_env_unuse(){
    local i
    local pkg_name
    local version

    local code=___x_cmd_env_config_set
    for i in "$@"; do
        pkg_name="${i%=*}"
        x pkg deactivate "$pkg_name"
        ___x_cmd___env_store_prev "$pkg_name"
        ___x_cmd___env_store_current "$pkg_name"
        code="$code $pkg_name="
    done

    eval "$code"        # Remove config in file
}

___x_cmd_env_which(){
    local i
    for i in "$@"; do
        x pkg xbin path "${i%=*}" "$(___x_cmd_env_get_version "$i")"
    done
}
