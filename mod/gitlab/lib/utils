# shellcheck shell=sh
# shellcheck disable=SC2039,3043

############################
# Section 2: Wrapping std/http module with object naming changing
############################
___x_cmd_gitlab_resp_header(){
    O="${O:-___x_cmd_gitlab_GITLAB_DEFAULT}" ___x_cmd_http resp header "$@"
}

# TODO: Not supported yet
___x_cmd_gitlab_resp_body(){
    O="${O:-___x_cmd_gitlab_GITLAB_DEFAULT}" ___x_cmd_http resp body "$@"
}

___x_cmd_gitlab_get_multi(){
    if [ -n "$page" ] || [ -n "$per_page" ]; then
        ___x_cmd_gitlab_http get "$@" page per_page
        return "$?"
    fi
    local i=1
    local total_count=100000
    while [ "$i" -le "$total_count" ]; do
        ___x_cmd_gitlab_http get "$@" page="$i" per_page=100
        total_count="$(___x_cmd_gitlab_resp_header "total_count")"
        [ -z "$total_count" ] && return
        # echo "total_count:$total_count" >&2
        i=$((i+1))
    done
}

___x_cmd_gitlab_http(){
    if ! O="${O:-___x_cmd_gitlab_GITLAB_DEFAULT}" ___x_cmd_http header get Content-Type 1>/dev/null 2>&1; then
         O="${O:-___x_cmd_gitlab_GITLAB_DEFAULT}" ___x_cmd_http header put Content-Type application/json
    fi
    O="${O:-___x_cmd_gitlab_GITLAB_DEFAULT}" ___x_cmd_http "$@"
}

############################
# Section 3: Parameter Utilities
############################

alias ___x_cmd_gitlab_param_init_owner_project='
    local owner_project
    ___x_cmd_gitlab_param_normalize_repo  || return
'

___x_cmd_gitlab_param_normalize_repo(){
    local op="$repo"
    [ -z "$op" ] && op="$1"
    case "$op" in
    */*)
        owner_project="$(printf "%s" "$op")"
        ;;
    "")
        local _owner
        local _repo
        _owner="$(___x_cmd_gitlab_current_owner)"
        if [ -z "$_owner" ]; then
            printf "No owner provided. Default owner NOT set.\n" >&2
            return 1
        fi

        _repo="$(___x_cmd_gitlab_current_repo)"
        if [ -z "$_repo" ]; then
            printf "No repo provided. Default repo NOT set.\n" >&2
            return 1
        fi

        owner_project="$(printf "%s/%s" "$_owner" "$_repo")"
        ;;
    *)
        local _owner
        _owner="$(___x_cmd_gitlab_current_owner)"
        if [ -z "$_owner" ]; then
            printf "No owner provided. Default owner not set.\n" >&2
        fi
        owner_project="$(printf "%s" "$_owner/$op")"
        ;;
    esac
}

### Repo #1

___x_cmd_gitlab_parse_owner_repo(){
    local O="${O:-___x_cmd_gitlab_GITLAB_DEFAULT}"
    if [ -z "$repo" ]; then
        repo="$(___x_cmd_gitlab_current_repo)"
    fi
    # if [[ "$repo" = */* ]]; then
    if str_regex "$repo" "/"; then
        owner=${repo%%/*}
        repo=${repo##*/}
    fi
    if [ -z "$owner" ]; then
        owner="$(___x_cmd_gitlab_current_owner)"
    fi
}

___x_cmd_gitlab_default(){
    param_default "$@" 2>/dev/null || return 1
}

___gitlab_ui_mutual(){
    if [ ! -t 1 ] || [ -n "$ENFORCE_JSON" ] ; then
        "$@"
    else
        # run ui table
        eval "$(cat)"
    fi

    local ___gitlab_exit_code="$?"
    [ "$___gitlab_exit_code" -eq 0 ] || gitlab_log error "${___gitlab_error_msg:-"Couldn't find any data"}"
    return "$___gitlab_exit_code"
}
