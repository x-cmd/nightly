# shellcheck shell=sh
# shellcheck disable=SC2039,3043

# define lazy loader
# ___x_cmd_definelazyloader   ___x_cmd_gitlab_groups_member           gitlab/lib/groups/member

___x_cmd_gitlab_groups(){
    param:scope     ___x_cmd_gitlab
    param:subcmd ___x_cmd_gitlab_groups                                                 \
        ls                      "List all groups"                                       \
        info                    "Show groups information"                               \
        create                  "Create groups"                                         \
        member                  "project member manage"                                 \
        update                  "Update group"
    param:subcmd:try
    param:run

    ___x_cmd_gitlab_groups _param_help_doc
    gitlab_log warn "Subcmd Not Found."
    return 1
}

___x_cmd_gitlab_subgroup(){
    param:scope     ___x_cmd_gitlab
    param:subcmd ___x_cmd_gitlab_subgroup               \
        ls                      "List all subgroups"    \
        create                  "Create subgroups"
    param:subcmd:try
    param:run

    ___x_cmd_gitlab_subgroup _param_help_doc
    gitlab_log warn "Subcmd Not Found."
    return 1
}

# Section: list & info
# shellcheck disable=SC2154
# skip_groups  正则	array of integers
___x_cmd_gitlab_groups_ls(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
type:
    order_by = name path id  similarity
    sort = asc desc
options:
    --sort                      "Order groups in asc or desc order."                                <>=""
    --search                    "Return the list of authorized groups matching the search criteria" <>=""
    --order_by                  "Order groups by"                                                   <>=""
    --skip_groups               "Skip the group IDs passed"                                         <>=""
    --min_access_level          "Limit to groups where current user has at least this access level" <>:Number=""
    --per_page                  "Results per page (max 100)"                                        <>=""
    --page                      "Page number of the results to fetch."                              <>=""
    --owned                     "Limit to groups explicitly owned by the current user"
    --statistics                "Include group statistics"
    --all_available             "Show all the groups you have access to"
    --top_level_only            "Limit to top level groups, excluding all subgroups"
    --with_custom_attributes    "Include custom attributes in response"
'
    param:run

    ___gitlab_ui_mutual ___x_cmd_gitlab_get_multi "/groups" per_page  page <<A
        ___ui_table_json Id=.id Name=.name Path=.path Visibility=.visibility Url=.web_url -- \$@
A
}

___x_cmd_gitlab_subgroup_ls(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
type:
    order_by = name path id  similarity
    sort = asc desc
options:
    #1|--id                     "The ID or URL-encoded path of the group of the immediate parent group" <>
    --sort                      "Order groups in asc or desc order."                                    <>=""
    --search                    "Return the list of authorized groups matching the search criteria"     <>=""
    --order_by                  "Order groups by"                                                       <>=""
    --skip_groups               "Skip the group IDs passed"                                             <>=""
    --min_access_level          "Limit to groups where current user has at least this access level"     <>:Number=""
    --owned                     "Limit to groups explicitly owned by the current user"
    --statistics                "Include group statistics"
    --all_available             "Show all the groups you have access to"
    --top_level_only            "Limit to top level groups, excluding all subgroups"
    --with_custom_attributes    "Include custom attributes in response"
'
    param:run

    ___gitlab_ui_mutual ___x_cmd_gitlab_get_multi "/groups/$1/subgroups" <<A
        ___ui_table_json Id=.id Name=.name Path=.path Visibility=.visibility Url=.web_url -- \$@
A
}

# shellcheck disable=SC2154
___x_cmd_gitlab_groups_info(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
options:
    #1|--groups                 "The ID or URL-encoded path of the group"     <>=""
    --with_projects             "Include details from projects that belong to the specified group"
    --with_custom_attributes    "Include custom attributes in response"
'
    param:run

    ___x_cmd_gitlab_http get "/groups/${1:?Provide groups ID or path}" | \
    {
        ___x_cmd_git_json_query_rename id=.id name=.name dir=.path visibility=.visibility url=.web_url
        if [ -n "$id" ]; then
            ___x_cmd_ui_tf true   "Success" "id: $id" "name: $name" "path: $dir" "visibility: $visibility" "url: $url"
        else
            ___x_cmd_ui_tf false  "Couldn't find any groups info data by $1"
            return 1
        fi
    }
}
# EndSection

# Section: create
# shellcheck disable=SC2181
# TODO:On GitLab SaaS, you must use the GitLab UI to create groups without a parent group. You cannot use the API to do this.???
___x_cmd_gitlab_groups_create(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
options:
    -p|--path                   "groups path"                   <>=""
    --description               "The group description."        <>=""
    --visibility                "The groups visibility."        <>="" = "" private internal public
    --subgroup_creation_level   "Allowed to create subgroups."  <>="" = "" maintainer owner
    #1                          "groups name"
'
    param:run
    local name
    name="$1"
    [ $# -ne 0 ] || { gitlab_log error "Please provide groups name"; return 1; }
    local gitlab_path="$name"
    [ -z "$p" ] || gitlab_path="$p"
    local gen_gitlab_json
    gen_gitlab_json="$(param:option2json -p +name path=gitlab_path)"

    ___x_cmd_gitlab_http post "/groups" -- "$gen_gitlab_json" | \
    {
        ___x_cmd_git_json_query_rename id=.id
        if [ -n "$id" ]; then
            ___x_cmd_ui_tf true   "Creating groups Successfully"
        else
            ___x_cmd_ui_tf false  "Creating groups failure by $1."
            return 1
        fi
    }
}
# EndSection

# Section: create subgroup
# shellcheck disable=SC2181
# TODO:On GitLab SaaS, you must use the GitLab UI to create groups without a parent group. You cannot use the API to do this.???
___x_cmd_gitlab_subgroup_create(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
options:
    --parent_id         "parent groups id."    <>
    --subgroup_path     "subgroup path"        <>=""
    --name              "subgroup name"        <>
'
    param:run
    local group_path="$subgroup_path"
    [ -n "$group_path" ] || group_path="$name"
    gen_gitlab_json="$(param:option2json -subgroup_path path=group_path)"
    ___x_cmd_gitlab_http post "/groups" -- "$gen_gitlab_json"| \
    {
        ___x_cmd_git_json_query_rename id=.id
        if [ -n "$id" ]; then
            ___x_cmd_ui_tf true   "Creating groups Successfully"
        else
            ___x_cmd_ui_tf false  "Creating groups failure by $1."
            return 1
        fi
    }
}
# EndSection

# Section: groups repo
___x_cmd_gitlab_groups_repo(){
    param:subcmd ___x_cmd_gitlab_groups_repo           \
        ls          "list repo"                 \
        create      "groups repo create"
    param:subcmd:try
    param:run

    ___x_cmd_gitlab_groups_repo _param_help_doc
    gitlab_log warn "Subcmd Not Found."
    return 1
}

# https://gitee.com/api/swagger#/getV5groupssgroupsRepos
___x_cmd_gitlab_groups_repo_ls(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
options:
    #1|--groups        "Please provide groups"       <>:Address
    --type          "type"                              <>:RepoAllAccess="all"
    --page          "page"                              <>:NatureNumber=1
    --per_page      "per_page"                          <>:NatureNumber=20
'
    param:run
    local gen_gitlab_json
    gen_gitlab_json="$(param:option2json -page -per_page)"

    local ___gitlab_error_msg="Couldn't find any data by: ${1}"
    ___gitlab_ui_mutual ___x_cmd_gitlab_get_multi "/groups/$1/repos" type <<A
        ___ui_table_json Id=.id Name=.name public=.public OwnerName=.owner.name DefaultBranch=.default_branch \
            OpenIssuesCount=.open_issues_count license=.license Url=.html_url -- \$@
A
}
# EndSection

# Section:groups update
___x_cmd_gitlab_groups_update(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
options:
    -p|--path                   "groups path"                   <>=""
    --name                      "The name of the group"         <>=""
    --description               "The group description."        <>=""
    --visibility                "The groups visibility."        <>="" = "" private internal public
    --subgroup_creation_level   "Allowed to create subgroups."  <>="" = "" maintainer owner
    #1                          "The ID of the group."
'
    param:run
    [ $# -ne 0 ] || { gitlab_log error "Please provide groups ID"; return 1; }
    local gitlab_path="$p"
    local gen_gitlab_json
    # path=gitlab_path
    gen_gitlab_json="$(param:option2json -p)"

    ___x_cmd_gitlab_http put "/groups/$1" "$gen_gitlab_json" | \
    {
        ___x_cmd_git_json_query_rename id=.id
        if [ -n "$id" ]; then
            ___x_cmd_ui_tf true   "Update groups Successfully"
        else
            ___x_cmd_ui_tf false  "Update groups failure by $1."
            return 1
        fi
    }
}
# EndSection

