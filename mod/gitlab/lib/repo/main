# shellcheck shell=sh
# shellcheck disable=SC2039,3043

___x_cmd_gitlab_repo(){
    param:scope         ___x_cmd_gitlab
    param:subcmd ___x_cmd_gitlab_repo                                       \
        create          "Create repo"                                   \
        ls              "List repo of owner"                            \
        info            "Show detailed information of repo"             \
        update          "Setup repo configure"                          \
        rm              "Remove repo"                                   \
        clear           "Clear repo"                                    \
        review          "Setup review repo configure"                   \
        issue           "List repo issue or Show the repo issue info"   \
        branch          "repo branch management"
    param:subcmd:try
    param:run

    ___x_cmd_gitlab_repo _param_help_doc
    gitlab_log warn "Subcmd Not Found."
    return 1
}

# Section: create
# shellcheck disable=SC2154
# https://gitee.com/api/swagger#/postV5UserRepos
___x_cmd_gitlab_repo_create(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
option:
    #1                                                  "repo names"                                                                        <>:RepoName
    -p|--path                                           "repo path"                                                                         <>=""
    --topics                                            "The list of topics for a project"                                                  <>:Array=""
    --avatar                                            "Image file for avatar of the project."                                             <>=""
    --tag_list                                          "The list of tags for a project"                                                    <>:Array=""
    --import_url                                        "URL to import repository from."                                                    <>=""
    --visibility                                        "See project visibility level."                                                     <>=""
    --description                                       "Short project description."                                                        <>=""
    --merge_method                                      "Set the merge method used."                                                        <>=""
    --namespace_id                                      "Namespace for the new project"                                                     <>=""
    --build_timeout                                     "The maximum amount of time, in seconds, that a job can run."                       <>:Number=""
    --squash_option                                     "One of never, always, default_on, or default_off."                                 <>=""
    --template_name                                     "When used without use_custom_template, name of a built-in project template."       <>=""
    --ci_config_path                                    "The path to CI configuration file."                                                <>=""
    --default_branch                                    "The default branch name."                                                          <>=""
    --wiki_access_level                                 "wiki access level"                                                                 <>=""
    --build_git_strategy                                "The Git strategy. Defaults to fetch."                                              <>=""
    --repository_storage                                "Which storage shard the repository is on."                                         <>=""
    --pages_access_level                                "Pages access level"                                                                <>=""
    --issues_access_level                               "Issues access level"                                                               <>=""
    --builds_access_level                               "One of disabled, private, or enabled."                                             <>=""
    --template_project_id                               "When used with use_custom_template, project ID of a custom project template."      <>:Number=""
    --forking_access_level                              "One of disabled, private, or enabled."                                             <>=""
    --snippets_access_level                             "Snippets access level"                                                             <>=""
    --analytics_access_level                            "One of disabled, private or enabled"                                               <>=""
    --approvals_before_merge                            "How many approvers should approve merge requests by default"                       <>:Number=""
    --repository_access_level                           "Repository access level"                                                           <>=""
    --operations_access_level                           "Operations access level"                                                           <>=""
    --requirements_access_level                         "Requirements access level"                                                         <>=""
    --auto_devops_deploy_strategy                       "Auto Deploy strategy"                                                              <>=""
    --merge_requests_access_level                       "Merge requests access level"                                                       <>=""
    --container_registry_access_level                   "Set visibility of container registry, for this project"                            <>=""
    --group_with_project_templates_id                   "specifies ID of group from which all the custom project templates are sourced."    <>:Number=""
    --security_and_compliance_access_level              "Security and compliance access level."                                             <>=""
    --container_expiration_policy_attributes            "Update the image cleanup policy for this project. "                                <>=""
    --external_authorization_classification_label       "The classification label for the project."                                         <>=""
    --mirror                                            "Enables pull mirroring in a project."
    --lfs_enabled                                       "Enable LFS."
    --jobs_enabled                                      "Enable jobs for this project."
    --wiki_enabled                                      "Enable wiki for this project. Use wiki_access_level instead."
    --public_builds                                     "If true, jobs can be viewed by non-project members."
    --issues_enabled                                    "Enable issues for this project."
    --emails_disabled                                   "Disable email notifications."
    --snippets_enabled                                  "Enable snippets for this project. "
    --packages_enabled                                  "Enable or disable packages repository feature."
    --auto_devops_enabled                               "Enable Auto DevOps for this project."
    --use_custom_template                               "Use either custom instance or group project template."
    --merge_trains_enabled                              "Enable or disable merge trains."
    --mirror_trigger_builds                             "Pull mirroring triggers builds."
    --initialize_with_readme                            "Whether to create a Git repository with just a README.md file"
    --shared_runners_enabled                            "Enable shared runners for this project."
    --request_access_enabled                            "Allow users to request member access."
    --merge_requests_enabled                            "Enable merge requests for this project."
    --merge_pipelines_enabled                           "Enable or disable merge pipelines."
    --container_registry_enabled                        "Enable container registry for this project."
    --autoclose_referenced_issues                       "Set whether auto-closing referenced issues on default branch."
    --auto_cancel_pending_pipelines                     "Auto-cancel pending pipelines."
    --allow_merge_on_skipped_pipeline                   "Set whether or not merge requests can be merged with skipped jobs."
    --remove_source_branch_after_merge                  "Enable Delete source branch option by default for all new merge requests."
    --resolve_outdated_diff_discussions                 "Automatically resolve merge request diffs discussions on lines changed with a push."
    --printing_merge_request_link_enabled               "Show link to create/view merge request when pushing from the command line."
    --only_allow_merge_if_pipeline_succeeds             "Set whether merge requests can only be merged with successful pipelines."
    --only_allow_merge_if_all_discussions_are_resolved  "Set whether merge requests can only be merged when all the discussions are resolved."
'
    param:run
    [ $# -ne 0 ] || { gitlab_log error "Please provide repo name"; return 1; }
    local gitlab_path="$1"
    [ -z "$p" ] || gitlab_path="$p"
    local name="$1"
    local gen_gitlab_json
    gen_gitlab_json="$(param:option2json +name -p path=gitlab_path)"
    ___x_cmd_gitlab_http post "/projects" "$gen_gitlab_json" | ___x_cmd_gitlab_repo_create_status_handler
}

# shellcheck disable=SC2154
___x_cmd_gitlab_repo_create_status_handler(){
    if [ ! -t 1 ] || [ -n "$ENFORCE_JSON" ]; then
        cat
        return
    fi

    ___x_cmd_git_json_query_rename repo_id=.id url=.web_url repo_owner=.owner.username
    if [ -n "$repo_id" ]; then
        ___x_cmd_ui_tf true  "Creating repo $name successfully" "repo_id: $repo_id" "repo_owner: $repo_owner" "url: $url"
    else
        ___x_cmd_ui_tf false "Creating repo failure: $name"
        return 1
    fi
}
# EndSection

# Section: list
# shellcheck disable=SC2154,SC2145
___x_cmd_gitlab_repo_ls(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
options:

'
    param:run
    ___x_cmd_gitlab_current_owner 1>/dev/null
    ___gitlab_ui_mutual  ___x_cmd_gitlab_http get "/users/$___X_CMD_GITLAB_DEFAULT_OWNER/projects"  <<A
    ___ui_table_json Id=.id Name=.name Owner=.owner.username Url=.web_url -- \$@
A
}
# EndSection

# Section: update

# shellcheck disable=SC2154,SC2034
# TODO: https://gitee.com/api/swagger#/patchV5ReposOwnerRepo need to design
___x_cmd_gitlab_repo_update(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
options:
    #1|--repo|--id      "Provide owner name and repo name.(default:the current user repo)"   <>:RepoName
   --description        "" <>=""
'
    param:run
    ___x_cmd_gitlab_param_init_owner_repo
    local gen_gitlab_json
    gen_gitlab_json="$(param:option2json -repo)"
    # urlecode
    ___x_cmd_gitlab_http put "/projects/37844641" "$gen_gitlab_json"
    # curl --request PUT --header "PRIVATE-TOKEN: glpat-9QznXTHLsPbBdTVS3iVs" "https://gitlab.com/api/v4/projects/tzw.mycw/test2"  --data "description=12342"
    # printf "%s" "${gen_gitlab_json}" | ___x_cmd_gitlab_http patch "/repos/${owner_repo}" - | \
    #     ___x_cmd_gitlab_repo_update_status_handler
}

___x_cmd_gitlab_repo_update_status_handler(){
    if [ ! -t 1 ] || [ -n "$ENFORCE_JSON" ]; then
        cat
        return
    fi

    ___x_cmd_git_json_query_rename url=.html_url
    if [ -n "$url" ]; then
        ___x_cmd_ui_tf true     "Update $name successfully" "url: $url"
    else
        ___x_cmd_ui_tf false    "Update failure: $name."
        return 1
    fi
}
# EndSection

# Section: info
# shellcheck disable=SC2154
# https://gitee.com/api/swagger#/getV5ReposOwnerRepo
___x_cmd_gitlab_repo_info(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
options:
    #1|--repo          "Provide owner name and repo name.(default:the current user repo)"   <>:RepoName
'
    param:run

    ___x_cmd_gitlab_param_init_owner_repo

    ___x_cmd_gitlab_http get "/repos/${owner_repo}" | ___x_cmd_gitlab_repo_info_status_handler
}

# shellcheck disable=SC2154
___x_cmd_gitlab_repo_info_status_handler() {
    if [ ! -t 1 ] || [ -n "$ENFORCE_JSON" ]; then
        cat
        return
    fi

    ___x_cmd_git_json_query_rename id=.id name=.name html_url=.html_url
    if [ -n "$id" ]; then
        ___x_cmd_ui_tf true    "Success" "id: $id" "name: $name" "url: $html_url"
    else
        ___x_cmd_ui_tf false   "Couldn't find any repo: $owner_repo"
        return 1
    fi
}
# EndSection

# Section: del & clear
# https://gitee.com/api/swagger#/deleteV5ReposOwnerRepo
# shellcheck disable=SC2181,SC2154
___x_cmd_gitlab_repo_rm(){
    # TODO: -y force del
    param:scope     ___x_cmd_gitlab
    param:dsl       '
options:
    #n      "Provide repo path list"    <>
'
    param:run

    local i
    for i in "$@"; do
        ___x_cmd_gitlab_param_normalize_repo "$i"
        # TODO:http handle，delete repo return data is null.Status: 204 No Content
        if ___x_cmd_gitlab_http delete "/repos/$owner_repo" >/dev/null; then
            ___x_cmd_ui_tf true  "Deleting repo $i successfully"
        else
            ___x_cmd_ui_tf false "Deleting repo failure: $i. Probably because it desn't exists."
            return 1
        fi
    done
}

# shellcheck disable=SC2181
# https://gitee.com/api/swagger#/putV5ReposOwnerRepoClear
___x_cmd_gitlab_repo_clear(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
options:
    #1|--repo          "Provide owner name and repo path.(default:the current user repo)"   <>:RepoName
'
    param:run

    ___x_cmd_gitlab_param_init_owner_repo

    # TODO:http handle，delete repo return data is null.Status: 204 No Content
    if ___x_cmd_gitlab_http put "/repos/${owner_repo}/clear" >/dev/null; then
        ___x_cmd_ui_tf true   "Clearing repo ${owner_repo} successfully"
    else
        ___x_cmd_ui_tf false  "Clearing repo failure: ${owner_repo}"
        return 1
    fi
}
# EndSection

# Section: pr review config

# shellcheck disable=SC2154,SC2181
# https://gitee.com/api/swagger#/putV5ReposOwnerRepoReviewer
___x_cmd_gitlab_repo_review(){
    param:scope     ___x_cmd_gitlab
    param:dsl       '
options:
    #1|--repo             "Provide owner name and repo name.(default:the current user repo)"   <>:RepoName
    --assignees           "assignees username"                                                 <>:UserName
    --testers             "testers usrename"                                                   <>:UserName
    --assignees_number    "number of reviewers"                                                <>:NatureNumber="1"
    --testers_number      "number of people tested"                                            <>:NatureNumber="1"
'
    param:run
    ___x_cmd_gitlab_param_init_owner_repo
    local gen_gitlab_json
    gen_gitlab_json="$(param:option2json)"

    ___x_cmd_gitlab_http put "/repos/${owner_repo}/reviewer" "$gen_gitlab_json" | ___x_cmd_gitlab_repo_review_status_handler
}

# shellcheck disable=SC2154
___x_cmd_gitlab_repo_review_status_handler(){
    if [ ! -t 1 ] || [ -n "$ENFORCE_JSON" ]; then
        cat
        return
    fi

    ___x_cmd_git_json_query_rename name=.name
    if [ -n "$name" ]; then
        ___x_cmd_ui_tf true   "Setuping ${owner_repo} review configure successfully"
    else
        ___x_cmd_ui_tf false  "Setuping repo review configure failure: ${owner_repo}"
        return 1
    fi
}
# EndSection
