
___x_cmd_pkg_deactivate(){
    ___x_cmd_pkg_deactivate___min "$@"
}

___x_cmd_pkg_deactivate___min(){
    local pkg_name="${1:?Provide pkg name}"
    local version
    local _line
    printf "%s\n" "$___X_CMD_PKG_ACTIVATE___LIST" | while read -r _line; do
        [ -n "$_line" ] || continue
        if [ "$pkg_name" = "${_line%=*}" ]; then
            version="${_line#*=}"
        fi
    done

    [ -n "$version" ] || {
        pkg:error "$pkg_name not activated"
        return 1
    }

    local osarch="${3:-${___X_CMD_PKG_OSARCH:-$(___x_cmd_pkg_osarch)}}"
    local script_path
    if script_path="$(___x_cmd_pkg___get_script_path "$pkg_name" "$version" "$osarch" deactivate)"; then
        pkg:debug "Deactivate running $script_path for $pkg_name $version"
        . "${script_path}"
    else
        ___x_cmd_pkg_deactivate___min_default "$pkg_name" "$version"
    fi

    local tmp="${___X_CMD_PKG_ACTIVATE___LIST#*
${pkg_name}=*
}"

    if [ "$tmp" != "$___X_CMD_PKG_ACTIVATE___LIST" ]; then
        ___X_CMD_PKG_ACTIVATE___LIST="${___X_CMD_PKG_ACTIVATE___LIST%%
${pkg_name}=*
}${tmp}"
    fi
}

___x_cmd_pkg_deactivate___min_default(){
    local pkg_name="${1:?Provide pkg name}"
    local version="${2:?Provide version}"
    x path rm "$___X_CMD_PKG_INSTALL_PATH/$pkg_name/$version/bin" || return 1
}
