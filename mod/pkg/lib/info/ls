# shellcheck shell=sh disable=SC2039,SC1090,SC3043,SC2263    # xrc

# ls app, default app
___x_cmd_pkg_ls(){
    case "$1" in
        i|installed)      shift;  ___x_cmd_pkg_ls_installed "$@" ;;
        a|activated)      shift;  ___x_cmd_pkg_ls_activated "$@" ;;
        A|all)            shift;  ___x_cmd_pkg_ls_all "$@" ;;
        *)                ___x_cmd_pkg_ls_installed "$@" ;;
    esac
}


# Invoked pkg ls installed
# TODO: efficiency defect
___x_cmd_pkg_ls_installed()(
    [ -d "$___X_CMD_PKG_INSTALL_PATH" ] || return 0
    osarch="$(___x_cmd_pkg_osarch)"
    locate_list="$(___x_cmd_pkg_ll)"
    (
        cd "$___X_CMD_PKG_INSTALL_PATH" || return
        for i in */*; do
            printf "%s\n" "$i";
        done
    ) | awk -v FS="/" \
        -v OSARCH="$osarch" \
        -v LOCAL_LIST="$locate_list" \
        -v PKG_RAWPATH="$___X_CMD_PKG_RAWPATH" \
        -v TH_THEME_COLOR="\\033[${___X_CMD_THEME_COLOR_CODE}m" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/default.awk" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/jqparse.awk" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/str.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/util.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/pkg.ls.awk"

)

# Invoked pkg ls activated: check environment variable...
___x_cmd_pkg_ls_activated(){
    [ -n "$___X_CMD_PKG_ACTIVATE___LIST" ] || return
    local _line
    local osarch
    local locate_list
    osarch="$(___x_cmd_pkg_osarch)"
    locate_list="$(___x_cmd_pkg_ll)"
    awk -v FS="=" \
        -v OSARCH="$osarch" \
        -v LOCAL_LIST="$locate_list" \
        -v PKG_RAWPATH="$___X_CMD_PKG_RAWPATH" \
        -v TH_THEME_COLOR="\\033[${___X_CMD_THEME_COLOR_CODE}m" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/default.awk" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/jqparse.awk" \
        -f "$___X_CMD_ROOT_MOD/awk/lib/str.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/util.awk" \
        -f "$___X_CMD_ROOT_MOD/pkg/lib/awk/pkg.ls.awk" <<A
${___X_CMD_PKG_ACTIVATE___LIST}
A
}

___x_cmd_pkg_ls_all(){
    if ! [ -d "$___X_CMD_PKG_RAWPATH" ]; then return 0; fi
    pkg_name="${1:?Provide package name}"
    cat "$___X_CMD_PKG_RAWPATH"/*/"$pkg_name/version.tt.json" | x ja 'O[2]=="\"'"$(os name)/$(os arch)"'\""{
        cur_version = juq(O[1])
        if ( juq(O[1]) != last_version) print cur_version
        last_version = cur_version
    }'
}

___x_cmd_pkg_rawpath_name_advise_ls()(
    if ! [ -d "$___X_CMD_PKG_RAWPATH" ]; then return 0; fi
    cd "$___X_CMD_PKG_RAWPATH" || exit
    local i
    for i in */*; do
        printf "%s\n" "${i#*/}"
    done
)

___x_cmd_pkg_rawpath_version_advise_ls(){
    local candidate_idx="${1:-2}"; [ -z "$ZSH_VERSION" ] || candidate_idx=$((candidate_idx+1))
    ___x_cmd_pkg_ls_all "${COMP_WORDS[${candidate_idx}]}"
}