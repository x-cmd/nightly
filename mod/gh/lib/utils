# shellcheck shell=sh
# shellcheck disable=SC2039,3043

############################
# Section 2: Wrapping std/http module with object naming changing
############################
___x_cmd_gh_resp_header() {
   O="${O:-___x_cmd_gh_GITHUB_DEFAULT}" ___x_cmd_http resp header "$@"
}

___x_cmd_gh_get_multi() {
    if [ -n "$page" ] || [ -n "$per_page" ]; then
        ___x_cmd_gh_http get "$@" page per_page
        return
    fi
    local i=1
    local total_page=100000
    while [ "$i" -le "$total_page" ]; do
        ___x_cmd_gh_http get "$@" page="$i" per_page=100
        total_page="$(___x_cmd_gh_resp_header "total_page")"
        [ -z "$total_page" ] && return
        # echo "total_page:$total_page" >&2
        i=$((i+1))
    done
}

___x_cmd_gh_http(){
    if ! O="${O:-___x_cmd_gh_GITHUB_DEFAULT}" ___x_cmd_http header get Accept 1>/dev/null 2>&1; then
         O="${O:-___x_cmd_gh_GITHUB_DEFAULT}" ___x_cmd_http header put Accept application/vnd.github.v3+json
    fi
    O="${O:-___x_cmd_gh_GITHUB_DEFAULT}" ___x_cmd_http "$@"
}

############################
# Section 3: Parameter Utilities
############################

alias ___x_cmd_gh_param_init_owner_repo='
    local owner_repo
    ___x_cmd_gh_param_normalize_repo  || return
'

___x_cmd_gh_param_normalize_repo() {
    local op="$repo"
    [ -z "$op" ] && op="$1"
    case "$op" in
    */*)
        owner_repo="$(printf "%s" "$op")"
        ;;
    "")
        local _owner
        local _repo
        _owner="$(___x_cmd_gh_current_owner)"
        if [ -z "$_owner" ]; then
            printf "No owner provided. Default owner NOT set.\n" >&2
            return 1
        fi

        _repo="$(___x_cmd_gh_current_repo)"
        if [ -z "$_repo" ]; then
            printf "No repo provided. Default repo NOT set.\n" >&2
            return 1
        fi
        owner_repo="$(printf "%s" "$_owner/$op")"
        ;;
    *)
        local _owner
        _owner="$(___x_cmd_gh_current_owner)"
        if [ -z "$_owner" ]; then
            printf "No owner provided. Default owner not set.\n" >&2
        fi
        owner_repo="$(printf "%s" "$_owner/$op")"
        ;;
    esac
}

### Repo #1

___x_cmd_gh_parse_owner_repo() {
    local O="${O:-___x_cmd_gh_GITHUB_DEFAULT}"
    if [ -z "$repo" ]; then
        repo="$(___x_cmd_gh_current_repo)"
    fi
    # if [[ "$repo" = */* ]]; then
    if str_regex "$repo" "/"; then
        owner=${repo%%/*}
        repo=${repo##*/}
    fi
    if [ -z "$owner" ]; then
        owner="$(___x_cmd_gh_current_owner)"
    fi
}

___x_cmd_gh_default(){
    param_default "$@" 2>/dev/null || return 1
}

_____x_cmd_git_repo(){
    local repo
    repo="$(git config --get remote.origin.url 2>/dev/null)"
    repo="${repo##*:}"
    repo="${repo%.*}"
    printf "%s" "$repo"
}
_____x_cmd_git_branch(){
    git symbolic-ref -q --short HEAD 2>/dev/null
}

___gh_ui_mutual(){
    if [ -t 1 ]; then
       if ! eval "$(cat)" && [ -n "$___gh_error_msg" ];then
            ___x_cmd_ui_tf false "$___gh_error_msg"
            return 1
       fi
    else
        "$@"
    fi
    return
}