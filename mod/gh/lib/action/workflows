# shellcheck shell=sh
# shellcheck disable=SC2039,3043

___x_cmd_gh_workflows() {
    param:subcmd  ___x_cmd_gh_workflows                 \
        ls      "lists the workflows in a repository."  \
        info    "gets a specific workflow."             \
        view    "View the summary of a workflow"        \
        disable "disables a workflow"                   \
        enable  "Enables a workflow"                    \
        create  "create a workflow dispatch event"      \
        flow    "Get billable minutes used by a specific workflow"
    param:subcmd:try
    param:run
    ___x_cmd_gh_action_workflows _param_help_doc
    return 1
}

___x_cmd_gh_action_workflows_view() {
    param:scope "github/$O"
    param:dsl <<A
options:
    --owner     ""  <>=""
    --run_id    ""  <>=""
    --repo      "Provide repo name.(default:the current user repo)"   <>:RepoName="$(_____x_cmd_git_repo)"
A
    param:run
    ___x_cmd_gh_param_init_owner_repo
    ___x_cmd_gh_http download "/repos/${owner_repo}/actions/runs/$run_id/logs"  "$___X_CMD_ROOT/.actions"
}

___x_cmd_gh_action_workflows_ls() {
    local repo
    repo="$(git config --get remote.origin.url)"
    param:scope "github/$O"
    param:dsl <<A
options:
    --owner     ""                                                                      <>=""
    --repo      "Provide owner name and repo name.(default:the current user repo)"      <>:RepoName="$(_____x_cmd_git_repo)"
    --actor     "returns someone workflow runs."                                        <>=""
    --branch    "Returns workflow runs associated with a branch."                       <>="$(_____x_cmd_git_branch)"
    --event     "Returns workflow run triggered by the event you specify."              <>=""
    -sta|--status    "Returns workflow runs with the check run status."                 <>=""
    --per_page  "Results per page (max 100)"                                            <>=""
    --page      "Page number of the results to fetch."                                  <>=""
    --created   "Returns workflow runs created within the given date-time range."       <>=""
    --check_suite_id  "Returns workflow runs with the check_suite_id that you specify." <>=""
    --exclude_pull_requests
A
    param:run
    ___x_cmd_gh_param_init_owner_repo
    if [ -t 1 ] && ___ui_table_json Id=.id runId=.run_number Status=.status Created=.created_at Event=.event Url=.html_url \
        -- "___x_cmd_gh_http get repos/$owner_repo/actions/runs actor branch event \
            sta per_page page created check_suite_id exclude_pull_requests | x jo q0 .workflow_runs" ;then
        return 0
    fi
    ___x_cmd_gh_http get "repos/$owner_repo/actions/runs" actor branch event sta per_page page created check_suite_id exclude_pull_requests
}

___x_cmd_gh_action_job_ls() {
    param:scope "github/$O"
    param:dsl <<A
options:
    --owner     ""                                                                      <>=""
    --repo      "Provide owner name and repo name.(default:the current user repo)"      <>:RepoName="$(_____x_cmd_git_repo)"
    --run_id    "The id of the workflow run."                                           <>
    --filter    "Filters jobs by their completed_at timestamp."
    --per_page  "Results per page (max 100)"                                            <>=""
    --page      "Page number of the results to fetch."                                  <>=""
A
    param:run
    ___x_cmd_gh_param_init_owner_repo
    if [ -t 1 ] && ___ui_table_json Id=.id Name=.name Status=.status Conclusion=.conclusion Url=.html_url \
        -- "___x_cmd_gh_http get /repos/${owner_repo}/actions/runs/${run_id}/jobs filter per_page page | x jo q0 .jobs" ;then
        return 0
    fi
    ___x_cmd_gh_http get "/repos/${owner_repo}/actions/runs/${run_id}/jobs" filter per_page page
}

___x_cmd_gh_action_job() {
    param:scope "github/$O"
    param:dsl <<A
options:
    --owner     ""                                                                      <>=""
    --repo      "Provide owner name and repo name.(default:the current user repo)"      <>:RepoName="$(_____x_cmd_git_repo)"
    --job_id    ""  <>=""
A
    param:run
    ___x_cmd_gh_param_init_owner_repo
    ___x_cmd_gh_http get "/repos/${owner_repo}/actions/jobs/$job_id" | (
        x jo env .steps.\* .name .conclusion -- 'x ui tf "$conclusion" "$name"'
    )
}

___x_cmd_gh_action_job_log() {
    param:scope "github/$O"
    param:dsl <<A
options:
    --owner     ""                                                                      <>=""
    --repo      "Provide owner name and repo name.(default:the current user repo)"      <>:RepoName="$(_____x_cmd_git_repo)"
    --job_id    ""  <>=""
A
    param:run
    ___x_cmd_gh_param_init_owner_repo
    ___x_cmd_gh_http download "/repos/${owner_repo}/actions/jobs/${job_id}/logs"  "$___X_CMD_ROOT/.actions"
}