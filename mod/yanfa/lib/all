# shellcheck shell=sh disable=SC3043,2120 # xrc

# Section: git

___x_cmd_yanfa_all(){
    param:dsl <<A
subcommand:
    ls          "list modules"
    update      "clone or update all repos"
    commit      "clone or update all repos"
    push        "clone or update all repos"
    repolist    "Show all repo"
    map         "map"
A
    param:run
    # push        "push"
    # pull        "pull"

    if [ -z "${PARAM_SUBCMD}" ]; then
        ___x_cmd_yanfa_all_update
        return
    fi

    "___x_cmd_yanfa_all_${PARAM_SUBCMD}" "$@"
}


___x_cmd_yanfa_all_repolist___one(){
    # curl https://gitee.com/x-cmd/x-cmd/raw/main/repolist 2>/dev/null | awk '{ if ($0 ~ /^\+/) gsub(/^\+/, "", $0); print $0 }'
    ___x_cmd_httpget_gitx_official repolist | awk '{ if ($0 ~ /^\+/) gsub(/^\+/, "", $0); print $0 }'
}

___x_cmd_yanfa_all_repolist(){
    param:void
    local i
    for i in 1 2 3; do
        ! ___x_cmd_yanfa_all_repolist___one || return 0
        sleep 1
    done
    return 1
}

___x_cmd_yanfa_all_map(){
    param:void
    local curdir="${1:-$HOME}"
    local x_bash_eval="${2:?Provide sentence}"
    local x_cmd_eval="${3:-"$2"}"

    [ ! -d "$curdir" ] && printf "Exepct a directory: %s\n" "$curdir" >&2 && return 1

    { mkdir -p "$curdir/x-bash" && cd "$curdir/x-bash" && cd -; } || printf "Cannot not enter directory: %s\n" "$curdir"
    { mkdir -p "$curdir/x-cmd" && cd "$curdir/x-cmd" && cd -; } || printf "Cannot not enter directory: %s\n" "$curdir"


    (
        cd "$curdir/x-bash" && {
            local org=x-bash
            local name
            ___x_cmd_yanfa_all_ls | while read -r name; do
                ( eval "$x_bash_eval"; )
            done
        }
    ) && (
        cd "$curdir/x-cmd" && {
            local name
            local org=x-cmd
            ___x_cmd_yanfa_all_repolist | while read -r name; do
                ( eval "$x_cmd_eval"; )
            done
        }
    )
}

# shellcheck disable=SC2016
# ___x_cmd_yanfa_all_update(){
#     param:void
#     ___x_cmd_yanfa_all_map "${1:-$HOME}" '
#         if [ -d "$name" ]; then
#             cd "$name" && git pull && git pull origin main
#         else
#             git clone "git@gitee.com:$org/$name.git"
#         fi
#     '
# }

____x_cmd_yanfa_git_update(){
    if [ -d "$name" ]; then
        ( cd "$name" && git pull && git pull origin main )
    else
        git clone "git@gitee.com:$org/$name.git"
    fi
}

___x_cmd_yanfa_all_update()(
    ___x_cmd_yanfa_all_foreach "${1:-$HOME}" ____x_cmd_yanfa_git_update
)

____x_cmd_yanfa_git_commit()(
    cd "$name"
    git commit -m "$MSG"
)

____x_cmd_yanfa_all_commit(){
    local MSG="${1:-...}"; shift
    ___x_cmd_yanfa_all_foreach "${1:-$HOME}" ____x_cmd_yanfa_git_commit
}

____x_cmd_yanfa_git_push()(
    cd "$name"
    xws push
)

____x_cmd_yanfa_all_push(){
    local MSG="${1:-...}"; shift
    ___x_cmd_yanfa_all_foreach "${1:-$HOME}" ____x_cmd_yanfa_git_push
}

___x_cmd_yanfa_all_foreach()(
    local dir="${1:-$HOME}"; shift

    local ___X_CMD_JOB_WRAPPER=silent

    mkdir -p "$dir/x-bash" "$dir/x-cmd"
    cd "$dir/x-bash" || return
    ___x_cmd_yanfa_all_ls | while read -r mod; do
        x job put 7 org=x-bash name="$mod" "$@"
    done

    cd "$dir/x-cmd" || return
    ___x_cmd_yanfa_all_repolist | while read -r mod; do
        x job put 7 org=x-cmd name="$mod" "$@"
    done

    x job wait
    sleep 3 # We have to reconsider it
)

___x_cmd_yanfa_all_ls(){
    param:void
    ___x_cmd_yanfa_mod_ls "$@"
}

## EndSection
