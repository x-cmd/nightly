# shellcheck shell=sh disable=SC2039,SC1090,SC3043,SC2263    # xrc

# Section: full_version ls_local ls_remote

___x_cmd_env_common_full_version(){
    local candidate="${1:?Provide candidate}"
    local version="${2:?Provide version}"
    printf "%s\n" "$version"
}

___x_cmd_env_common_ls_local(){
    local candidate="${1:?Provide candidate}"
    if [ -d "$___X_CMD_ENV_PATH/$candidate/versions" ]; then
        ls "$___X_CMD_ENV_PATH/$candidate/versions"
    fi
}

___x_cmd_env_common_la(){
    :
}
# EndSection

# Section: use, try, ws

___x_cmd_env_common_use(){
    local candidate="${1:?Provide candidate}"
    local version="${2:?Provide version}"
    local shims="${3:-""}"

    ___x_cmd_env_util_is_downloaded "$candidate" "$version" 2>/dev/null || return 1

    local versions_path
    if [ -z "$shims" ]; then
        versions_path="${___X_CMD_ENV_PATH}/$candidate/versions/$version/bin"
    else
        versions_path="${___X_CMD_ENV_PATH}/$candidate/shims"
        ___x_cmd_env_util_make_shim_dir "$candidate" "${version}" || return 1
    fi

    ___x_cmd_env_util_add_path "$versions_path" || return 1
    x boot rc add "x-env-$candidate" "xrc env/lib/util && ___x_cmd_env_util_add_path \"$versions_path\"" && \
        printf "%s\n" "$version" > "$___X_CMD_ENV_PATH/$candidate/version" && \
        env_log info "Using $candidate $version -> $___X_CMD_ENV_PATH/$candidate/version"
}

___x_cmd_env_common_try(){
    local candidate="${1:?Provide candidate}"
    local version="${2:?Provide version}"
    local versions_path="${3:-"$___X_CMD_ENV_PATH/$candidate/versions/$version/bin"}"

    ___x_cmd_env_util_is_downloaded "$candidate" "$version" 2>/dev/null || return 1
    ___x_cmd_env_util_add_path "$versions_path" && \
        env_log info "Setting ${candidate} ${version} in current Shell."
}

# EndSection

# Section: current

___x_cmd_env_common_current(){
    local candidate="${1:?Provide candidate}"
    local candidate_path
    candidate_path="$(command -v "$candidate")"

    # No any candidate version
    if [ -z "$candidate_path" ]; then
        env_log error "No version of %s $candidate detected, please install it first! "
        return 1

    # After try and no candidate version in xenv, but has candidate version in current shell.
    elif [ "$candidate_path" != "$___X_CMD_ENV_PATH/$candidate/shims/$candidate" ]; then
        local try_path="${candidate_path#*"versions/"}"
        try_path="${try_path%%/*}"
        if [ "$try_path" != "$candidate" ] && [ -n "$try_path" ]; then
            printf "%s\n" "$try_path"
        else
            printf "%s\n" "system"
        fi
        return 0

    # Use(shims)
    else
        local version
        if ! version=$(___x_cmd_env_util_shims_which_version "$candidate"); then
            env_log error "No version of %s $candidate detected, please download it first! "
            return 1
        fi

        local exactly_path="$___X_CMD_ENV_PATH/$candidate/versions/$version/bin/$candidate"
        if [ ! -f "$exactly_path" ]; then
            env_log error "No such file: $exactly_path"
            return 1
        fi

        printf "%s\n" "$version"
    fi
}
# EndSection

# Section: download

___x_cmd_env_common_download(){
    local candidate="${1:?Provide canddidate}"
    local version="${2:?Provide version}"

    if ___x_cmd_env_util_is_downloaded "$candidate" "$version" 2>/dev/null ; then
        env_log info "Already downloaded $candidate $version"
        return 0
    fi

    if ! ___x_cmd_env_run_common_if_notfound download_archive "$candidate" "$version"; then
        env_log info "Failed to download $candidate $version"
        return 1
    fi

    if ! ___x_cmd_env_run_common_if_notfound unpack "$candidate" "$version"; then
		env_log info "Failed to unpack $candidate of version: $version."
		return 1
	fi
}

# EndSection

# Section: install, uninstall
___x_cmd_env_common_install(){
    local candidate="${1:?Provide canddidate}"
    local version="${2:?Provide version}"
    local shims="${3:-""}"

    env_log info "Installing $candidate $version"
    if ! ___x_cmd_env_run_common_if_notfound download "$candidate" "$version"; then
        env_log info "Failed to installed $candidate of version: $version."
        return 1
    fi

    ___x_cmd_env_common_use "$candidate" "$version" "$shims" || return 1
    env_log info "Successfully installed $candidate $version"
}

___x_cmd_env_common_uninstall(){
    local candidate="${1:?Provide candidate}"
    local version="${2:?Provide the version}"
    env_log info "Uninstalling $1 $2"

    local candidate_path="$___X_CMD_ENV_PATH/${candidate}/versions/${version}"
    if [ -d "$candidate_path" ]; then
        rm -rf "${candidate_path}"
    else
        env_log  warn "This ${candidate} ${version} is no exist."
        return 1
    fi
    x boot rc del "x-env-$candidate"
    # TODO: remove the shims from $PATH
}
# EndSection

# Section: which, exec
___x_cmd_env_common_which(){
    local candidate="${1:?Provide candidate}"
    local candidate_path
    candidate_path="$(command -v "$candidate")"

    if [ "$candidate_path" != "$___X_CMD_ENV_PATH/$candidate/shims/$candidate" ]; then
        command -v "$candidate"
        return 0
    fi

    local version
    if version=$(___x_cmd_env_util_shims_which_version "$candidate"); then
        local exactly_path="$___X_CMD_ENV_PATH/$candidate/versions/$version/bin/$candidate"
        if [ ! -f "$exactly_path" ]; then
            env_log error "No such file: $exactly_path"
            return 1
        fi
        printf "%s\n" "$exactly_path"
    fi
}

___x_cmd_env_common_exec(){
    local candidate="${1:?Provide candidate}"
    local version="${2:?Provide version}"; shift 2
    ___x_cmd_env_util_is_downloaded "${candidate}" "${version}" 2>/dev/null || return 1
    local PATH="${___X_CMD_ENV_PATH}/${candidate}/versions/${version}/bin:$PATH"
    "${candidate}" "$@"
}
# EndSection
