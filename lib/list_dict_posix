# Start this at one time.
___x_cmd_jo_list(){
    local IFS
    IFS="$(printf "\001")"
    printf "%s" "$*" | awk -v RS="$IFS" '
function quote( a ){
    gsub(/"/, "\\\"", a)
    gsub(/\n/, "\\n", a)
    gsub(/\r/, "\\r", a)
    gsub(/\b/, "\\b", a)
    gsub(/\t/, "\\t", a)
    gsub(/\v/, "\\v", a)
    return "\"" a "\""
}

{
    res = $0
    if (res !~ /(^{.*}$)|(^\[.*\]$)/) {
        if(res !~ /^([+-]?[0-9]+(.[0-9]+)*([eE][0-9]+(.[0-9]+))*)|(true)|(false)|(null)$/) {
            res = quote(res)
        }
    }
    s= (s == "") ? res : ( s "," res )
}
END{
    print "[" s "]"
}
'
}

___x_cmd_jo_dict(){
    local i

    local IFS=
    IFS="$(printf "\002")"

    local RS
    RS="$(printf "\001")"

    {
        printf "%s${RS}" "$*"
        for i in "$@"; do
            case "$i" in
                *=*)          ;;
                *:*)          ;;
                *)
                    printf "%s${RS}" "$i"
                    eval 'printf "%s${RS}"' " \"\$$i\""
                ;;
            esac
        done
    } | awk -v RS="$RS" '
function quote( a ){
    gsub(/"/, "\\\"", a)
    gsub(/\n/, "\\n", a)
    gsub(/\r/, "\\r", a)
    gsub(/\b/, "\\b", a)
    gsub(/\t/, "\\t", a)
    gsub(/\v/, "\\v", a)
    return "\"" a "\""
}
NR==1{
    gsub(/\n/, "\003", $0)
    argl = split($0, argv, "\002")
}

NR>1{

    if (NR%2 == 0) {
        arg = $0
    } else {
        env[ arg ] = $0
    }
}

END {
    printf "{\n"
    for (i=1; i<=argl; ++i) {
        if (i != 1) printf ",\n"
        var = argv[ i ]
        gsub("\003", "\n", $0)
        if (var ~ /=/) {
            idx = index(var, "=")
            key = substr(var, 1, idx-1)
            value = substr(var, idx+1)

            if (value !~ /(^{.*}$)|(^\[.*\]$)/) {
                if(value !~ /^([+-]?[0-9]+(.[0-9]+)*([eE][0-9]+(.[0-9]+))*)|(true)|(false)|(null)$/) {
                    value = quote(value)
                }
            }
            printf( "  %s: %s", quote(key), value )
        } else if (var ~ /:/) {
            idx = index(var, ":")
            key = substr(var, 1, idx-1)
            value = substr(var, idx+1)

            printf( "  %s: %s", quote(key), quote(value) )
        } else {
            printf( "  %s: %s", quote(var), quote(env[var]) )
        }
    }
    printf "\n}"
}
'

}
