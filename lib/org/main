# shellcheck shell=sh
# shellcheck disable=SC2039,3043

___x_cmd_gh_org(){
    param:scope     "github/$O"
    param:dsl       '
subcmd:
    ls                      "get organizations list"
    info                    "Show information"
    repo                    "List all repos"
    member                  "member management"
'
    param:run

    if [ -z "$PARAM_SUBCMD" ]; then
        gh_log warn "Command Not Found. Show help."
        ___x_cmd_gh_org _param_help_doc
        return 1
    fi

    "___x_cmd_gh_org_${PARAM_SUBCMD}" "$@"
}


___x_cmd_gh_org_ls() {
    param:void

    local url
    if [ $# -gt 0 ]; then
         url="/users/$1/orgs"
    else url="/user/orgs"
    fi

    ___ui_table_json "$(printf "%s" "___x_cmd_gh_get_multi $url || return 1" )" Id=.id Name=.login && return 0

    ___x_cmd_ui_tf "false" "get $1 organizations ls fail"
}

___x_cmd_gh_org_info() {
    param:scope     "github/$O"
    param:dsl       '
options:
    #1|--org        "org space address"    <>:address
'
    param:run

    [ "$org" = "" ] && gh_log error "Organization name is required" && return 1

    ___x_cmd_gh_get "/orgs/$org" && return 0

    __x_cmd_ui_tf "false" "get $1 organizations info fail"
    return 1
}

___x_cmd_gh_org_repo(){
    param:dsl       '
subcmd:
    ls          "list repo"
    create      "org repo create"
'
    param:run
    if [ -z "$PARAM_SUBCMD" ]; then
        gh_log error "Command Not Found. Show help."
        return 0
    fi
    "___x_cmd_gh_org_repo_${PARAM_SUBCMD}" "$@"
}

___x_cmd_gh_org_repo_ls() {
    param:scope     "github/$O"
    param:dsl       '
options:
    --type     "type"     <>="all"    = all private public
'
    param:run
    ___x_cmd_gh_get_multi "/orgs/${1:?Provide organization}/repos" type
}

# Section: Member

___x_cmd_gh_org_member(){
    param:dsl       '
subcmd:
    ls            "list member"
    user            "get org member user info"
    add             "add member"
    del|remove      "Remove member"
'
    param:run

    if [ -z "$PARAM_SUBCMD" ]; then
        echo "subcommand not found. show help." >&2
        return 0
    fi

    "___x_cmd_gh_org_member_$PARAM_SUBCMD" "$@"
}

___x_cmd_gh_org_member_ls() {
    param:scope     "github/$O"
    param:dsl       '
options:
    --filter        "Filter members returned in the list."  <>="all"
    --role          "Repo name"            <>="all"         = admin member all
    #1|--org        "org space address"    <>:address
'
    param:run
    ___ui_table_json "$(printf "%s" "___x_cmd_gh_get_multi "/orgs/${org##*/}/members" role filter || return 1" )" \
        Id=.id UserName=.login Url=.html_url  && return 0
}

___x_cmd_gh_org_member_user() {
    param:scope     "github/$O"
    param:dsl      '
options:
    --username          "username:space address"    <>:name
    #1|--org            "org space address"         <>:address
'
    param:run
    ___x_cmd_gh_get "/orgs/${org##*/}/memberships/${username##*/}"
}

___x_cmd_gh_org_member_add() {
    param:scope     "github/$O"
    param:dsl       '
type:
    role = admin member
options:
    --org           "org"       <>:address
    --role          "role"      <>:role="member"
    #n              "username"
'
    param:run

    # repo="$(___x_cmd_gh_param_normalize_repo "$repo")" || return 1
    if [ -z "$1" ];then
        echo "At least one user’s spatial address is needed"
        return 1
    fi

        for username in "$@"; do
        {
            ___x_cmd_gh_put_json "/orgs/${org##*/}/memberships/${username##*/}" role
            local code=$?
            if [ $code -ne 0 ]; then
                echo "Creating repo failure: $username. Code is $code. " >&2
                return $code
            fi
        }
    done
}

___x_cmd_gh_org_member_del() {
    param:scope     "github/$O"
    param:dsl       '
options:
    --org       "org space address"         <>:address
    #n          "username"
'
    param:run

    if [ -z "$1" ];then
        echo "At least one user’s spatial address is needed"
        return 1
    fi

    local username
    for username in "$@"; do
        {
            ___x_cmd_gh_delete "/orgs/${org##*/}/memberships/${username##*/}"
            code=$?
            if [ $code -ne 0 ]; then
                echo "Creating repo failure: $name. Code is $code. " >&2
                return $code
            fi
        }
    done
}


# EndSection

