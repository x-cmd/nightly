# shellcheck shell=sh
# shellcheck disable=SC2039,3043

___x_cmd_gh_org(){
    param:scope     "github/$O"
    param:dsl       '
subcmd:
    ls                      "get organizations list"
    info                    "Show information"
    repo                    "List all repos"
    member                  "member management"
'
    param:run

    if [ -z "$PARAM_SUBCMD" ]; then
        gh_log warn "Command Not Found. Show help."
        ___x_cmd_gh_org _param_help_doc
        return 1
    fi

    "___x_cmd_gh_org_${PARAM_SUBCMD}" "$@"
}


___x_cmd_gh_org_ls() {
    param:void

    local url
    if [ $# -gt 0 ]; then
         url="/users/$1/orgs"
    else url="/user/orgs"
    fi

    ___ui_table_json "$(printf "%s" "___x_cmd_gh_get_multi $url || return 1" )" Id=.id Name=.login && return 0

    ___x_cmd_ui_tf "false" "get $1 organizations ls fail"
}

___x_cmd_gh_org_info() {
    param:scope     "github/$O"
    param:dsl       '
options:
    #1|--org        "org space address"    <>:address
'
    param:run

    local data
    data="$(___x_cmd_gh_get "/orgs/$org")"

    [ $? -ne 0 ] &&  ___x_cmd_ui_tf "false" "get $org organizations info fail" && return 1

    local id
    local name
    local html_url
    ___x_cmd_gh_json_query_rename "$data" id=.id html_url=.html_url name=.login
    ___x_cmd_ui_tf  "true" "get $org organizations info success" "Id: $id" "Name: $name" "Url: $html_url"
}

___x_cmd_gh_org_repo(){
    param:dsl       '
subcmd:
    ls          "list repo"
    create      "org repo create"
'
    param:run
    if [ -z "$PARAM_SUBCMD" ]; then
        gh_log error "Command Not Found. Show help."
        return 0
    fi
    "___x_cmd_gh_org_repo_${PARAM_SUBCMD}" "$@"
}

___x_cmd_gh_org_repo_ls() {
    param:scope     "github/$O"
    param:dsl       '
options:
    --type     "type"                   <>="all"    = all private public
    #1|--org   "org space address"      <>:address
'
    param:run
     ___ui_table_json "$(printf "%s" "___x_cmd_gh_get_multi "/orgs/$org/repos" type || return 1" )" \
      Id=.id Name=.name OwnerName=.owner.login IsPrivate=.private && return 0

    ___x_cmd_ui_tf "false" "Please provide owner and owner_type"
    return 1
}

    # Section: Member

___x_cmd_gh_org_member(){
    param:dsl       '
subcmd:
    ls              "list member"
    user            "get org member user info"
    add             "add member"
    del|remove      "Remove member"
'
    param:run

    if [ -z "$PARAM_SUBCMD" ]; then
        echo "subcommand not found. show help." >&2
        return 0
    fi

    "___x_cmd_gh_org_member_$PARAM_SUBCMD" "$@"
}

___x_cmd_gh_org_member_ls() {
    param:scope     "github/$O"
    param:dsl       '
options:
    --filter        "Filter members returned in the list."  <>="all"
    --role          "Repo name"            <>="all"         = admin member all
    #1|--org        "org space address"    <>:address
'
    param:run
    ___ui_table_json "$(printf "%s" "___x_cmd_gh_get_multi "/orgs/${org##*/}/members" role filter || return 1" )" \
        Id=.id UserName=.login Url=.html_url  && return 0
}

___x_cmd_gh_org_member_user() {
    param:scope     "github/$O"
    param:dsl      '
options:
    --username          "username:space address"    <>:name
    #1|--org            "org space address"         <>:address
'
    param:run
    local data
    data="$(___x_cmd_gh_get "/orgs/${org##*/}/memberships/${username##*/}")"

    [ $? -ne 0 ] &&  ___x_cmd_ui_tf "false" "get $username in organizations info fail" && return 1

    local role
    local url
    local name
    local state
    ___x_cmd_gh_json_query_rename "$data" role=.role url=.organization_url name=.user.login state=.state
    ___x_cmd_ui_tf  "true" "get $username in organizations info  success" "Name: $name" "Role: $role" "state: $state" "Url: $url"
}

___x_cmd_gh_org_member_add() {
    param:scope     "github/$O"
    param:dsl       '
type:
    role = admin member
options:
    --org           "org"       <>:address
    --role          "role"      <>:role="member"
    #n              "username"
'
    param:run
    [ $# -eq 0 ] && gt_log error "provide at least one username" && return 1
    for username in "$@"; do
        {
            ___x_cmd_gh_put_json "/orgs/${org##*/}/memberships/${username##*/}" role 1>/dev/null 2>&1
            [ $? -ne 0 ] && ___x_cmd_ui_tf "false" "add $username to organizations fail" && return 1
            ___x_cmd_ui_tf  "true" "add $username to organizations  success"
        }
    done
}

___x_cmd_gh_org_member_del() {
    param:scope     "github/$O"
    param:dsl       '
options:
    --org       "org space address"         <>:address
    #n          "username"
'
    param:run

    [ $# -eq 0 ] && gt_log error "provide at least one username" && return 1

    local username
    for username in "$@"; do
        {
            ___x_cmd_gh_delete "/orgs/${org##*/}/memberships/${username##*/}" 1>/dev/null 2>&1

            [ $? -ne 0 ] && ___x_cmd_ui_tf "false" "del $username to organizations fail" && return 1

            ___x_cmd_ui_tf  "true" "del $username to organizations  success"
        }
    done
}


# EndSection

