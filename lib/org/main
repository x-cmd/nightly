# shellcheck shell=sh
# shellcheck disable=SC2039,3043

# define lazy loader
# ___x_cmd_definelazyloader   ___x_cmd_gt_org_member           gt/lib/org/member

___x_cmd_gt_org(){
    param:scope     "gitee/$O"
    param:dsl       '
subcmd:
    ls                      "Show org information or List all org"
    create                  "create org"
    repo                    "List all repos"
    quit                    "quit org"
    issue                   "List all issues"
    member                  "member management"
'
    param:run
    if [ -z "$PARAM_SUBCMD" ]; then
        gt_log warn "Subcmd Not Found."
        ___x_cmd_gt_org _param_help_doc
        return 1
    fi

    "___x_cmd_gt_org_${PARAM_SUBCMD}" "$@"
}

# shellcheck disable=SC2154
___x_cmd_gt_org_ls() {
    param:scope     "gitee/$O"
    param:dsl       '
options:
    --admin      "admin"       <>:Bool=false
'
    param:run

    if [ $# -eq 0 ]; then
        ___ui_table_json "$(printf "%s" "______x_cmd_gt_get_multi \"/v5/user/orgs\" admin page per_page || return 1" )" \
            Id=.id Name=.name FollowCount=.follow_count Url=.repos_url && return 0
        return 1
    fi

    local data
    local id
    local name
    local public
    local follow_count
    local owner
    data="$(______x_cmd_gt_get "/v5/orgs/${1:?Provide organization}")"
    [ -z "$data" ] && gt_log "err" "Getting organization info failure by $1" && return 1

    ___x_cmd_gt_json_query_rename "$data" id=.id name=.name public=.public follow_count=.follow_count owner=.owner.name
    ___x_cmd_ui tf "true" "Success" "id: $id" "name: $name" "public: $public" "follow_count: $follow_count" "owner: $owner"
}

# It is very rare TODO: batch?
# shellcheck disable=SC2181
___x_cmd_gt_org_create() {
    param:scope     "gitee/$O"
    param:dsl       '
options:
    --org           "organization path"     <>=""
    --description   "description"           <>=""
    #1              "organization name"     <>
'
    param:run
    org=${org:-$1}
    ______x_cmd_gt_post_json "/v5/users/organization" name="$1" org description  1>/dev/null
    [ $? -ne 0 ] && gt_log error "Creating organization failure: $1." && return 1
                    gt_log info  "Creating organization Successfully" && return 0
}

___x_cmd_gt_org_repo(){
    param:dsl       '
subcmd:
    ls          "list repo"
    create      "org repo create"
'
    param:run

    if [ -z "$PARAM_SUBCMD" ]; then
        gt_log warn "Subcmd Not Found."
        ___x_cmd_gt_org_repo _param_help_doc
        return 1
    fi

    "___x_cmd_gt_org_repo_${PARAM_SUBCMD}" "$@"
}

# https://gitee.com/api/v5/swagger#/getV5OrgsOrgRepos
___x_cmd_gt_org_repo_ls() {
    param:scope     "gitee/$O"
    param:dsl       '
options:
    --type      "type"                          <>="all"    = all private public
    #1|--org    "Please provide organization"   <>:Address
'
    param:run
     ___ui_table_json "$(printf "%s" "O=$O ______x_cmd_gt_get_multi \"/v5/orgs/$1/repos\" type || return 1" )" \
            Id=.id Name=.name public=.public OwnerName=.owner.name DefaultBranch=".default_branch" OpenIssuesCount=.open_issues_count license=.license Url=.html_url && return 0
}

# shellcheck disable=SC2181
___x_cmd_gt_org_quit() {
    param:scope     "gitee/$O"
    param:dsl       '
options:
    #n      "orgs"
'
    param:run

    [ $# -eq 0 ] && gt_log error "At least one org spatial address is needed." && return 1

    for org in "$@"; do
    {
        ______x_cmd_gt_delete "/v5/user/memberships/orgs/${org##*/}"

        [ $? -ne 0 ] && gt_log error "Quit $org organization failure"     &&   return 1
                        gt_log info  "Quit $org organization successfully."
    }
    done
}
