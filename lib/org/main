# shellcheck shell=sh
# shellcheck disable=SC2039,3043

# define lazy loader
___x_cmd_definelazyloader   ___x_cmd_gt_org_member           gt/lib/org/member

___x_cmd_gt_org(){
    param:scope     "gitee/$O"
    param:dsl       '
subcmd:
    info                    "Show information"
    create                  "create org"
    repo                    "List all repos"
    quit                    "quit org"
    issue                   "List all issues"
    member                  "member management"
'
    param:run
    if [ -z "$PARAM_SUBCMD" ]; then
        gt_log warn "Subcmd Not Found."
        ___x_cmd_gt_org _param_help_doc
        return 1
    fi

    "___x_cmd_gt_org_${PARAM_SUBCMD}" "$@"
}

# TODO: rename "ls"?
___x_cmd_gt_org_info() {
    param:scope     "gitee/$O"
    param:dsl       '
type:
options:
    --admin      "admin"       <>:bool=false
'
    param:run

    if [ $# -eq 0 ]; then
        ___ui_table_json "$(printf "%s" "______x_cmd_gt_get_multi \"/v5/user/orgs\" admin page per_page || return 1" )" \
            Id=.id Name=.name FollowCount=.follow_count Url=.repos_url && return 0
        [ $? -eq 1 ] && return 1
    else
        local data
        data="$(______x_cmd_gt_get "/v5/orgs/${1:?Provide organization}")"
        local id
        local name
        local follow_count
        local public
        local owner
        id="$(___x_cmd_gt_json_query "$data" .id)"
        name="$(___x_cmd_gt_json_query "$data" .name)"
        public="$(___x_cmd_gt_json_query "$data" .public)"
        follow_count="$(___x_cmd_gt_json_query "$data" .follow_count)"
        owner="$(___x_cmd_gt_json_query "$data" .owner.name)"
        if [ -n "$id" ];then
            ui tf "true" "Success" "id: $id" "name: $name" "public: $public" "follow_count: $follow_count" "owner: $owner" && return 0
        else
            gt_log "err" "Getting organization info failure by $1"   && return 1
        fi
    fi
    return 0
}

# It is very rare TODO: batch?
# shellcheck disable=SC2181
___x_cmd_gt_org_create() {
    param:scope     "gitee/$O"
    param:dsl       '
options:
    #1              "organization name"     <>:name
    --org           "organization path"     <>=""
    --description   "description"           <>=""
'
    param:run
    org=${org:-$1}
    ______x_cmd_gt_post_json "/v5/users/organization" name="$1" org description  1>/dev/null
    [ $? -ne 0 ] && gt_log error "Creating organization failure: $1." && return 1
                    gt_log info  "Creating organization Successfully" && return 0
}

___x_cmd_gt_org_repo(){
    param:dsl       '
subcmd:
    ls          "list repo"
    create      "org repo create"
'
    param:run

    if [ -z "$PARAM_SUBCMD" ]; then
        gt_log warn "Subcmd Not Found."
        ___x_cmd_gt_org_repo _param_help_doc
        return 1
    fi

    "___x_cmd_gt_org_repo_${PARAM_SUBCMD}" "$@"
}

# https://gitee.com/api/v5/swagger#/getV5OrgsOrgRepos
___x_cmd_gt_org_repo_ls() {
    param:scope     "gitee/$O"
    param:dsl       '
options:
    --type     "type"     <>="all"    = all private public
'
    param:run
    if [ -z "$1" ]; then
        gt_log error "Please provide organization"
        return 1
    fi
     ___ui_table_json "$(printf "%s" "O=$O ______x_cmd_gt_get_multi \"/v5/orgs/${1:?Provide organization}/repos\" type || return 1" )" \
            Id=.id Name=.name public=.public OwnerName=.owner.name DefaultBranch=".default_branch" OpenIssuesCount=.open_issues_count license=.license Url=.html_url && return 0
}

___x_cmd_gt_org_quit() {
    param:scope     "gitee/$O"
    param:dsl       '
options:
    #n      "orgs"
'
    param:run
    if [ -z "$1" ];then
        gt_log error "At least one org spatial address is needed."
        return 1
    fi

    for org in "$@"; do
    {
        ______x_cmd_gt_delete "/v5/user/memberships/orgs/${org##*/}"

        [ $? -ne 0 ] && gt_log error "Quit $org organization failure"     &&   return 1
                        gt_log info  "Quit $org organization successfully.";   return 0
    }
    done
}
