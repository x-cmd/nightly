# shellcheck shell=sh
# shellcheck disable=SC2039,3043

# define lazy loader
___x_cmd_definelazyloader   ___x_cmd_gt_repo_ls             gt/lib/repo/main

___x_cmd_gt_user(){
    param:scope     "gitee/$O"
    param:dsl       '
subcmd:
    info        "Show information"
    repo        "List all repos"
    email       "get user email"
    issue       "List all issues"
    key         "key management"
'
    param:run
    if [ -z "$PARAM_SUBCMD" ]; then
        gt_log warn "Subcmd Not Found."
        ___x_cmd_gt_user _param_help_doc
        return 1
    fi

    # list issues of user
    # list repo of user
   case "${PARAM_SUBCMD}" in
       repo)  "___x_cmd_gt_repo_ls"              "$@"    ;;
       *)     "___x_cmd_gt_user_${PARAM_SUBCMD}" "$@"
   esac
}

# Section: info repo email issue

___x_cmd_gt_user_info() {
    param:scope     "gitee/$O"
    param:dsl       '
options:
    #1              "Username, if not set, show the user information of current owner, or owner of this token"
'
    param:run

    local owner="$1"
    local data
    if [ -z "$owner" ]; then
        data=$(______x_cmd_gt_get "/v5/user" )
    else
        data=$(______x_cmd_gt_get "/v5/users/$1")
    fi

    # TODO: wait json_awk
    local name
    local email
    local html_url
    local types
    name="$(___x_cmd_gt_json_query "$data" .login)"
    email="$(___x_cmd_gt_json_query "$data" .email)"
    html_url="$(___x_cmd_gt_json_query "$data" .html_url)"
    types="$(___x_cmd_gt_json_query "$data" .type)"
#     ___json_awk_get name=.login html_url=.html_url types=.type <<A
#     $data
# A
    [ -n "$name" ] && ui tf  "true" "Success" "Name: $name" "Email: $email" "Url: $html_url" "Type: $types" && return 0
                      gt_log "err" "Can't find any data"                                                    && return 1
}

# https://gitee.com/api/v5/swagger#/getV5UserRepos
# ___x_cmd_gt_user_repo_list() {
___x_cmd_gt_user_repo() {
    param:scope     "gitee/$O"
    param:dsl       '
type:
    authority = all public private
    group = owner collaborator organization_member enterprise_member admin
    sort = created updated pushed full_name
    direction = desc asc
subcmd:
    ls              "list repo of the designated user"
options:
    --visibility    "visibility"        <>:authority="all"
    --affiliation   "affiliation"       <>:group="owner"
    --sort          "sort"              <>:sort="created"
    --direction     "direction"         <>:direction="desc"
'
    param:run
    if [ "$#" -gt 0 ]; then
         ______x_cmd_gt_get_multi "/v5/users/$1/repos" visibility affiliation sort direction
    else ______x_cmd_gt_get_multi "/v5/user/repos"     visibility affiliation sort direction
    fi
}

# https://gitee.com/api/v5/swagger#/getV5Emails
___x_cmd_gt_user_email(){
    param:void
    [ -t 1 ] && ___ui_table_json "$(printf "%s" "______x_cmd_gt_get_multi \"/v5/emails\" || return 1" )" \
        Email=.email State=.state && return 0
}

___x_cmd_gt_user_issue(){
    param:scope     "gitee/$O"
    param:dsl       '
type:
    screen = all assigned created
    sort = open progerssing closed rejected
    direction = desc asc
options:
    --filter        "filter(assigned,created,all)"                 <>:screen="assigned"
    --state         "state(open,progerssing,closed,rejected)"      <>:sort="open"
    --labels        "labels"                                       <>=""
    --direction     "direction(asc„ÄÅdesc)"                         <>:direction="desc"
    --since         "since"                                        <>=""
    --page          "page"                                         <>:numbers=""
    --per_page      "per_page"                                     <>:numbers=""
    --schedule      "schedule"                                     <>=""
    --deadline      "deadline"                                     <>=""
    --created_at    "create date"                                  <>=""
    --finished_at   "finish date"                                  <>=""
'
    param:run
    ___ui_table_json "$(printf "%s" "______x_cmd_gt_get_multi \"/v5/user/issues\" filter state labels direction since schedule deadline created_at finished_at  || return 1" )" \
        id=.number State=.issue_state Type=.issue_type Title=.title Url=.html_url && return 0
}

# EndSection

# Section: key

# generate a key by openssl, then save it in the x-cmd cloud.
___x_cmd_gt_user_key(){
    param:scope     "gitee/$O"
    param:dsl       '
subcmd:
    ls          "List all key"
    add         "Add key"
    get         "Get one key"
    del         "Delete key"
'
    param:run

    if [ -z "$PARAM_SUBCMD" ]; then
        gt_log warn "Subcmd Not Found."
        ___x_cmd_gt_user_key _param_help_doc
        return 1
    fi

    # list issues of user
    # list projects of user

    "___x_cmd_gt_user_key_${PARAM_SUBCMD}" "$@"
}

___x_cmd_gt_user_key_ls(){
    param:scope     "gitee/$O"
    param:dsl       '
options:
    --page        "page"                    <>:number=1
    --per_page    "per_page"                <>:number=20
'
    param:run
    ___ui_table_json "$(printf "%s" "______x_cmd_gt_get \"/v5/user/keys\" page per_page || return 1" )" \
        Id=.id Title=.title Key=.key Url=.url && return 0
}

# shellcheck disable=SC2154
___x_cmd_gt_user_key_get(){
    param:scope     "gitee/$O"
    param:dsl       '
options:
    --id        "provided key id"       <>:number
'
    param:run
    local data
    data="$(______x_cmd_gt_get "v5/user/keys/$id")"
    local key
    key="$(___x_cmd_gt_json_query "$data" .key)"
    [ -n "$key" ] && printf "%s" "$key"                     && return 0
                     gt_log "err" "Can't find key by $id"   && return 1
}

# shellcheck disable=SC2181
___x_cmd_gt_user_key_del(){
    param:scope     "gitee/$O"
    param:dsl       '
options:
    --id        "provided key id"           <>:number
'
    param:run

    ______x_cmd_gt_delete "/v5/user/keys/$id" 1>/dev/null
    [ $? -eq 0 ] && ui tf "true" "Deleted key successfully"  && return 0
                gt_log error "Deleting key failure by $id."  && return 1
}

___x_cmd_gt_user_key_add(){
    param:scope     "gitee/$O"
    param:dsl       '
options:
    --key       "add key"                   <>
    --title     "add key title"             <>
'
    param:run

    local data
    data="$(______x_cmd_gt_post_json "/v5/user/keys" key title)"
    local id
    local title
    local key
    id="$(___x_cmd_gt_json_query "$data" .id)"
    title="$(___x_cmd_gt_json_query "$data" .title)"
    key="$(___x_cmd_gt_json_query "$data" .key)"
    [ -n "$id" ] && ui tf  "true" "Success" "Id: $id" "title: $title" "key: $key" && return 0                       && return 0
                    gt_log "err" "Adding user key failure."   && return 1
}

