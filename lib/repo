# shellcheck shell=sh
# shellcheck disable=SC2039,3043

___x_cmd_gt_repo(){
    param:scope     "gitee/$O"
    param:dsl       '
subcmd:
    new             "new repo client"
    create          "create repo"
    ls              "list repo of owner"
    info            "Show detailed information of repo"
    del             "Remove repo"
    clear           "clear repo"
    issue           "get repo issue"
    release         "release"
    review          "review repo"
'
    param:run
    if [ -z "$PARAM_SUBCMD" ]; then
        gt_log warn "Subcmd Not Found."
        ___x_cmd_gt_repo _param_help_doc
        return 1
    fi
    
    "___x_cmd_gt_repo_${PARAM_SUBCMD}" "$@" 
}

____x_cmd_gt_repo()(
    ___x_cmd_gt_current_repo "${1:-repo}"
    shift
    ___x_cmd_gt_repo ${1:+"$@"}
)

___x_cmd_gt_repo_new() {
    param:void
    local reponame="${1:?Provide object name}"
    local aliasname="${2:-$reponame}"
    # shellcheck disable=SC2139
    alias "$aliasname=\"O=$O ____x_cmd_gt_repo $reponame\""
}

# arguments NAME
___x_cmd_gt_repo_create() {
    local O="${O:-GITEE_DEFAULT}"

    param:scope     "gitee/$O"
    param:dsl       '
type:
    access  =   private public
option:
    --access                "private,public"                <>:access=private
    --description           "description"                   <>=""
    --homepage              "homepage"                      <>=""
    --no_issues             "Provide issue"
    --no_wiki               "Provide wiki"
    --no_comment            "Provide can_comment"
    --no_auto_init          "auto init README"
    --gitignore_template    "Git Ignore"                    <>:Ignore=" "
    --license_template      "license"                       <>:license=" "
    --paths                 "repo path"                     <>:url_type=""
    #n                      "repo names"
'

    param:run

    local private
    case "$access" in
        public)     private=false ;;
        private)    private=true ;;
    esac

    local has_issues=true
    local has_wiki=true
    local can_comment=true
    local auto_init=true
    [ -n "$no_issues" ] && has_issues=false
    [ -n "$no_wiki" ] && has_wiki=false
    [ -n "$no_comment" ] && can_comment=false
    [ -n "$no_auto_init" ] && auto_init=false

    [ $# -eq 0 ] && gt_log info "repo create name is null" && return
    local name
    for name in "$@"; do
        {
            local data repo_id url repo_owner
            data=$(______x_cmd_gt_post_json "/v5/user/repos" name="${name##*/}" description homepage has_issues has_wiki can_comment \
            auto_init gitignore_template license_template path="$paths" private 2>/dev/null)
            ___json_awk_get repo_id=.id url=.html_url repo_owner=.owner.login <<A
            $data
A
            if [ -n "$repo_id" ];then
                ui tf "true" "Creating repo $name success" "repo_id:$repo_id" "url:$url" "repo_owner:$repo_owner" 
            else
                gt_log error "Creating repo failure: $name. Code is $code. " 
            fi
        }
    done
}

# ORGANIZATION NAME
# shellcheck disable=SC2154,SC2034

# https://gitee.com/api/v5/swagger#/postV5OrgsOrgRepos
___x_cmd_gt_org_repo_create() {
    # TODO: I don't know what does path means for an organization repo
    # path is null default repo name as path
    param:scope     "gitee/$O"
    param:dsl       '
type:
    access  =   private public innerSource
option:
    --org                   "organization create repo"      <>:name
    --description           "description"                   <>=""
    --access                "private,public,innerSource"    <>:access=private
    --homepage              "homepage"                      <>:url_type=""
    --no_issues             "Provide issue"
    --no_wiki               "Provide wiki"
    --no_comment            "Provide can_comment"
    --no_auto_init          "auto init README"
    --gitignore_template    "Git Ignore"                    <>:Ignore=""
    --license_template      "license"                       <>:license=""
    --paths                  "repo path"                    <>:url_type=""
    #n                      "repo names"
'
    param:run


    case "$access" in
        private)        private=0 ;;
        public)         private=1 ;;
        innerSource)    private=2 ;;
    esac

    local has_issues=true
    local has_wiki=true
    local can_comment=true
    local auto_init=true
    [ -n "$no_issues" ] && has_issues=false
    [ -n "$no_wiki" ] && has_wiki=false
    [ -n "$no_comment" ] && can_comment=false
    [ -n "$no_auto_init" ] && auto_init=false
    # TODO:owner may be personal
    local name
    for name in "$@"; do
        # name="$(______x_cmd_gt_param_normalize_repo "$name")"
        # owner="$(echo "$name" | cut -d / -f 1)"
        # name="$(echo "$name" | cut -d / -f 2)"
        local resp
        {
            ______x_cmd_gt_post_json "/v5/orgs/$org/repos" name description homepage has_issues has_wiki can_comment auto_init \
             gitignore_template license_template path="$paths" public
            code=$?
            if [ $code -ne 0 ]; then
                gt_log error "Creating repo failure: $name. Code is $code. "
                # ______x_cmd_gt_resp_header "" >&2
                return $code
            fi
        } 
    done
}

# https://gitee.com/api/v5/swagger#/postV5EnterprisesEnterpriseRepos
# shellcheck disable=SC2154
___x_cmd_gt_enterprise_repo_create() {
    param:scope     "gitee/$O"
    param:dsl       '
type:
    access  =   private public innerSource
option:
    --enterprise            "enterprise space address"          <>
    --access                "private,public,innerSource"        <>:access=private
    --description           "description"                       <>=""
    --homepage              "homepage"                          <>:url_type=""
    --paths                 "repo path"                         <>:url_type=""
    --no_issues             "Provide issue"
    --no_wiki               "Provide wiki"
    --no_comment            "Provide can_comment"
    --no_auto_init          "auto init README"
    --outsourced            "Provide outsourced"
    --gitignore_template    "Git Ignore"                        <>:Ignore=""
    --license_template      "license"                           <>:license=""
    --project_creator       "Provide project_creator"           <>:name=""
    --members               "Provide members(name or email)"    <>=""
'
    param:run

    case "$access" in
        private)        private=0 ;;
        public)         private=1 ;;
        innerSource)    private=2 ;;
    esac
    local has_issues=true
    local has_wiki=true
    local can_comment=true
    local auto_init=true
    [ -n "$no_issues" ] && has_issues=false
    [ -n "$no_wiki" ] && has_wiki=false
    [ -n "$no_comment" ] && can_comment=false
    [ -n "$no_auto_init" ] && auto_init=false

    outsourced=${outsourced:-false}

    # TODO
    local name
    for name in "$@"; do
    {
        ______x_cmd_gt_post_json "/v5/enterprises/${enterprise##*/}/repos" \
            name description homepage has_issues can_comment auto_init \
            gitignore_template license_template path="$paths" private enterprise outsourced project_creator members
            code=$?
            if [ $code -ne 0 ]; then
                gt_log error "Creating repo failure: $name. Code is $code. "
                return $code
            fi
        } | json_color
    done
    return 0
}


############################
# Section 5: List Repos TODO:
############################

# gt repo list --access inner-source <owner>
# gt enterprise repo list
___x_cmd_gt_repo_ls() {
    param:void
    local owner
    owner="$1"

    if [ -z "$owner" ]; then
        ___x_cmd_gt_user_repo "$@"
        return
    fi

    local owner_type
    owner_type="$(______x_cmd_gt_owner_type_query "$owner")"
    if [ -n "$owner_type" ] && [ -n "$owner" ]; then
        "___x_cmd_gt_${owner_type}_repo" ls "$@"
        return
    fi

    gt_log error "Please provide owner and owner_type\n"
    return 1
    # param_help.show
}

############################
# Section 7: Repo - Deletion & Info & Creation
############################
___x_cmd_gt_repo_info() {
    param:scope     "gitee/$O"
    param:dsl       '
options:
    #1|--repo          "Repo name"         <>:repo
'
    param:run

    ___x_cmd_gt_param_init_owner_repo
    ______x_cmd_gt_get "/v5/repos/${owner_repo}"
    # ______x_cmd_gt_get "/v5/repos/${owner}/${repo}"
}

# https://gitee.com/api/v5/swagger#/deleteV5ReposOwnerRepo
___x_cmd_gt_repo_del() {
    param:scope     "gitee/$O"
    param:dsl       '
options:
    #n      "Provide repo list"    <>
'
    param:run
    local confirm
    confirm=$(ui select "text" "Are you sure you want to delete repo $*" "yes" "no")
    [ "$confirm" = "no" ] && return
    local i
    for i in "$@"; do
        ______x_cmd_gt_param_normalize_repo "$i"
        ______x_cmd_gt_delete "/v5/repos/$owner_repo" >/dev/null 
        if [ $? -eq 0 ]; then
            ui tf "true" "deleted repo $i"
        else
            gt_log error "Code is $?. Deleting repo failure: $i. Probably because it desn't exists."
        fi
    done
}

___x_cmd_gt_repo_clear() {
    param:scope     "gitee/$O"
    param:dsl       '
options:
    #1|--repo          "Repo name"             <>:repo
'
    param:run

    ___x_cmd_gt_param_init_owner_repo
    local confirm
    confirm=$(ui select "text" "Are you sure you want to clear repo ${owner_repo}" "yes" "no")
    [ "$confirm" = "no" ] && return
    ______x_cmd_gt_put_json "/v5/repos/${owner_repo}/clear" && ui tf "true" "Successfully clear ${owner_repo}" && return
    gt_log error "clear repo failure: $owner_repo"
}

___x_cmd_gt_repo_review(){
    param:scope     "gitee/$O"
    param:dsl       '
options:
    #1|--repo             "Repo name"                   <>:repo
    --assignees           "assignees username"          <>:name
    --testers             "testers usrename"            <>:name
    --assignees_number    "number of reviewers"         <>:number="1"
    --testers_number      "number of people tested"     <>:number="1"
'
    param:run
    ___x_cmd_gt_param_init_owner_repo
    ______x_cmd_gt_put_json "/v5/repos/${owner_repo}/reviewer" assignees testers assignees_number testers_number
}