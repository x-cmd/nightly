# shellcheck shell=sh
# shellcheck disable=SC2039,3043

___x_cmd_gt_repo(){
    param:scope     "gitee/$O"
    param:dsl       '
subcmd:
    create          "create repo"
    ls              "list repo of owner"
    info            "show detailed information of repo"
    del             "remove repo"
    clear           "clear repo"
    issue           "get repo issue"
    review          "setup review repo configure"
'
    param:run
    if [ -z "$PARAM_SUBCMD" ]; then
        gt_log warn "Subcmd Not Found."
        ___x_cmd_gt_repo _param_help_doc
        return 1
    fi

    "___x_cmd_gt_repo_${PARAM_SUBCMD}" "$@"
}

____x_cmd_gt_repo()(
    ___x_cmd_gt_current_repo "${1:-repo}"
    shift
    ___x_cmd_gt_repo ${1:+"$@"}
)

___x_cmd_gt_repo_new() {
    param:void
    local reponame="${1:?Provide object name}"
    local aliasname="${2:-$reponame}"
    # shellcheck disable=SC2139
    alias "$aliasname=\"O=$O ____x_cmd_gt_repo $reponame\""
}

# arguments NAME
# shellcheck disable=SC2154
___x_cmd_gt_repo_create() {
    local O="${O:-GITEE_DEFAULT}"

    param:scope     "gitee/$O"
    param:dsl       '
type:
    Access  =   private public
option:
    --access                "private,public"                <>:Access=private
    --description           "description"                   <>=""
    --homepage              "homepage"                      <>=""
    --no_issues             "Provide issue"
    --no_wiki               "Provide wiki"
    --no_comment            "Provide can_comment"
    --no_auto_init          "Not auto init README"
    --gitignore_template    "Git Ignore"                    <>:Ignore=" "
    --license_template      "license"                       <>:license=" "
    --paths                 "repo path"                     <>:url_type=""
    #n                      "repo names"
'

    param:run

    local private
    case "$access" in
        public)     private=false ;;
        private)    private=true ;;
    esac

    local has_issues=true
    local has_wiki=true
    local can_comment=true
    local auto_init=true
    [ -n "$no_issues" ] && has_issues=false
    [ -n "$no_wiki" ] && has_wiki=false
    [ -n "$no_comment" ] && can_comment=false
    [ -n "$no_auto_init" ] && auto_init=false
    # TODO: ___x_cmd_gt_printf_command_log

    [ $# -eq 0 ] && gt_log info "repo create name is null" && return
    local name
    for name in "$@"; do
        {
            local data
            data=$(______x_cmd_gt_post_json "/v5/user/repos" name="${name##*/}" description homepage has_issues has_wiki can_comment \
            auto_init gitignore_template license_template path="$paths" private 2>/dev/null)
            ___x_cmd_gt_json_query_rename "$data" repo_id=.id url=.html_url repo_owner=.owner.login
            if [ -n "$repo_id" ];then
                ___x_cmd_ui tf "true" "Creating repo $name success" "repo_id: $repo_id" "repo_owner: $repo_owner" "url: $url"
                return 0
            else
                gt_log error "Creating repo failure: $name. Code is $code. "
                return 1
            fi
        }
    done
}

# ORGANIZATION NAME
# shellcheck disable=SC2154,SC2034

# https://gitee.com/api/v5/swagger#/postV5OrgsOrgRepos
___x_cmd_gt_org_repo_create() {
    # TODO: I don't know what does path means for an organization repo
    # path is null default repo name as path
    param:scope     "gitee/$O"
    param:dsl       '
type:
    Access  =   private public innerSource
option:
    --org                   "organization create repo"      <>:name
    --description           "description"                   <>=""
    --access                "private,public,innerSource"    <>:Access=private
    --homepage              "homepage"                      <>:url_type=""
    --no_issues             "Provide issue"
    --no_wiki               "Provide wiki"
    --no_comment            "Provide can_comment"
    --no_auto_init          "auto init README"
    --gitignore_template    "Git Ignore"                    <>:Ignore=""
    --license_template      "license"                       <>:license=""
    --paths                  "repo path"                    <>:url_type=""
    #n                      "repo names"
'
    param:run


    case "$access" in
        private)        private=0 ;;
        public)         private=1 ;;
        innerSource)    private=2 ;;
    esac

    local has_issues=true
    local has_wiki=true
    local can_comment=true
    local auto_init=true
    [ -n "$no_issues" ] && has_issues=false
    [ -n "$no_wiki" ] && has_wiki=false
    [ -n "$no_comment" ] && can_comment=false
    [ -n "$no_auto_init" ] && auto_init=false
    # TODO: owner may be personal
    local name
    local code
    for name in "$@"; do
        local resp
        {
            ______x_cmd_gt_post_json "/v5/orgs/$org/repos" name description homepage has_issues has_wiki can_comment auto_init \
             gitignore_template license_template path="$paths" public 1>/dev/null
            code=$?
            if [ $code -ne 0 ]; then
                gt_log error "Creating repo failure: $name. Code is $code. "
                return $code
            else
                gt_log info "Creating $name repo successfully."
                return 0
            fi
        }
    done
}

# https://gitee.com/api/v5/swagger#/postV5EnterprisesEnterpriseRepos
# shellcheck disable=SC2154
___x_cmd_gt_enterprise_repo_create() {
    param:scope     "gitee/$O"
    param:dsl       '
type:
    Access  =   private public innerSource
option:
    --enterprise            "enterprise space address"          <>
    --Access                "private,public,innerSource"        <>:Access=private
    --description           "description"                       <>=""
    --homepage              "homepage"                          <>:url_type=""
    --paths                 "repo path"                         <>:url_type=""
    --no_issues             "Provide issue"
    --no_wiki               "Provide wiki"
    --no_comment            "Provide can_comment"
    --no_auto_init          "auto init README"
    --outsourced            "Provide outsourced"
    --gitignore_template    "Git Ignore"                        <>:Ignore=""
    --license_template      "license"                           <>:license=""
    --project_creator       "Provide project_creator"           <>:name=""
    --members               "Provide members(name or email)"    <>=""
'
    param:run

    case "$access" in
        private)        private=0 ;;
        public)         private=1 ;;
        innerSource)    private=2 ;;
    esac
    local has_issues=true
    local has_wiki=true
    local can_comment=true
    local auto_init=true
    [ -n "$no_issues" ] && has_issues=false
    [ -n "$no_wiki" ] && has_wiki=false
    [ -n "$no_comment" ] && can_comment=false
    [ -n "$no_auto_init" ] && auto_init=false

    outsourced=${outsourced:-false}

    # TODO
    local name
    local code
    for name in "$@"; do
    {
        ______x_cmd_gt_post_json "/v5/enterprises/${enterprise##*/}/repos" \
            name description homepage has_issues can_comment auto_init \
            gitignore_template license_template path="$paths" private enterprise outsourced project_creator members
            code=$?
            if [ $code -ne 0 ]; then
                gt_log error "Creating $name repo failure. Code is $code. "
                return $code
            fi
    }
    done
    return 0
}

############################
# Section 5: List Repos
############################
# shellcheck disable=SC2154,SC2145
___x_cmd_gt_repo_ls() {
    param:void
    local owner_type
    if [ $# -eq 0 ];then
        owner_type=user
    else
        local owner="$1"
        owner_type="$(______x_cmd_gt_owner_type_query "$owner")"
    fi

    ___ui_table_json "$(printf "%s" "___x_cmd_gt_${owner_type}_repo ls $@ || return 1" )" \
        Id=.id Name=.name Owner=.owner.login Url=.html_url && return 0

    gt_log error "Please provide owner and owner_type"
    return 1
}

############################
# Section 7: Repo - Deletion & Info & Creation
############################
# shellcheck disable=SC2154
___x_cmd_gt_repo_info() {
    param:scope     "gitee/$O"
    param:dsl       '
options:
    #1|--repo          "Repo or Path(owner/repo)"         <>:repo
'
    param:run

    # get owner_repo by repo
    ___x_cmd_gt_param_init_owner_repo
    ___x_cmd_gt_printf_command_log "gt repo info -r $repo"

    local data
    data=$(______x_cmd_gt_get "/v5/repos/${owner_repo}" || return 1)
        ___x_cmd_gt_json_query_rename "$data" id=.id name=.name html_url=.html_url
    [ -n "$name" ] && ___x_cmd_ui tf "true" "Success" "id: $id" "name: $name" "url: $html_url" && return 0
                      gt_log         "error" "Fail. Couldn't find any repo: $repo"             && return 1
}

# https://gitee.com/api/v5/swagger#/deleteV5ReposOwnerRepo
# shellcheck disable=SC2181,SC2154
___x_cmd_gt_repo_del() {
    # TODO: -y force del
    param:scope     "gitee/$O"
    param:dsl       '
options:
    #n      "Provide repo list"    <>
'
    param:run
    xrc ui/lib/form
    ___x_cmd_gt_printf_command_log "gt repo del " "$@"

    local ___X_CMD_UI_FORM_EXIT_STRATEGY="execute|exit"
    ___x_cmd_ui_form "Are you sure you want to $(___x_cmd_ui bold red delete "repo:") $(___x_cmd_ui bold "$*")" tf 1 = "yes" "no"
    [ "$tf" != "yes" ] && gt_log info "Delete repo has been canceled" &&  return 0
    local i
    for i in "$@"; do
        ______x_cmd_gt_param_normalize_repo "$i"
        ______x_cmd_gt_delete "/v5/repos/$owner_repo" 1>/dev/null 2>&1
        [ $? -eq 0 ] && ui tf "true" "Deleted repo $i successfully"                                  && return 0
                        gt_log error "Deleting repo failure: $i. Probably because it desn't exists." && return 1
    done
}

# shellcheck disable=SC2181
___x_cmd_gt_repo_clear() {
    param:scope     "gitee/$O"
    param:dsl       '
options:
    #1|--repo          "Repo name"             <>:repo
'
    param:run

    ___x_cmd_gt_param_init_owner_repo
    ___x_cmd_gt_printf_command_log "gt repo clear -r " "$@"

    local ___X_CMD_UI_FORM_EXIT_STRATEGY="execute|exit"
    ___x_cmd_ui_form "Are you sure you want to $(ui bold red clear repo) $(ui bold "${owner_repo}")" tf 1 = "yes" "no"
    [ "$tf" != "yes" ] && gt_log info "Clear repo has been canceled" &&  return 0

    ______x_cmd_gt_put_json "/v5/repos/${owner_repo}/clear" 1>/dev/null 2>&1
    [ $? -eq 0 ] && ___x_cmd_ui tf "true" "Successfully clear ${owner_repo}" && return 0
                    gt_log error "Clearing repo failure: $owner_repo"        && return 1
}

# shellcheck disable=SC2154,SC2181
___x_cmd_gt_repo_review(){
    param:scope     "gitee/$O"
    param:dsl       '
options:
    #1|--repo             "Repo name"                   <>:repo
    --assignees           "assignees username"          <>:assignees
    --testers             "testers usrename"            <>:testers
    --assignees_number    "number of reviewers"         <>:assignees_number="1"
    --testers_number      "number of people tested"     <>:testers_number="1"
'
    param:run
    ___x_cmd_gt_param_init_owner_repo
    ___x_cmd_gt_printf_command_log "gt repo review " \
    "--repo $repo --assignees $assignees --testers $testers --assignees_number $assignees_number --testers_number $testers_number"

    ______x_cmd_gt_put_json "/v5/repos/${owner_repo}/reviewer" assignees testers assignees_number testers_number 1>/dev/null 2>&1
    [ $? -eq 0 ] && ___x_cmd_ui tf "true" "Successfully setup ${owner_repo} review configure" && return 0
                    gt_log error "Setup repo review configure failure: $owner_repo"           && return 1
}
