# shellcheck shell=sh
# shellcheck disable=SC2039,3043

___x_cmd_gh_repo_pr(){
    param:dsl       '
subcmd:
    ls              "list pull requests"
    info            "pull request info"
    log             "pull requests log"
    commit          "get pull requests commit"
    create          "create pull request"
    update          "update pull requests"
    merge           "merge pull requests"
'
    param:run

    if [ -z "$PARAM_SUBCMD" ]; then
        gh_log error "Command Not Found. Show help."
        return 0
    fi

    "___x_cmd_gh_repo_pr_${PARAM_SUBCMD}" "$@"
}


# Section: ls info log commit view

___x_cmd_gh_repo_pr_ls() {

    param:scope     "github/$O"
    param:dsl       '
type:
    state = open merged closed all
    sort  = created updated popularity long-running
    direction = desc asc
options:
    --repo              "Repo name"                                         <>
    --state             "state"                                             <>:state="open"
    --head              "source branch. Format: [username:]<branch>"        <>=""
    --base              "target branch. Format: [username:]<branch>"        <>=""
    --sort              "sort"                                              <>:sort="created"
    --direction         "direction"                                         <>:direction="desc"
'
    param:run

    ___x_cmd_gh_param_init_owner_repo
    ___x_cmd_gh_get "/repos/$owner_repo/pulls" state head base sort direction>a.json
}

# Assume pr and owner_repo are environments
___parse_pr_init_owner_repo_and_pr_main(){
    local pr_number=${pr##*/}
    owner_repo=${pr%/$pr_number}
    ___x_cmd_gh_param_normalize_repo "$owner_repo"
    pr="$pr_number"
}

alias ___parse_pr_init_owner_repo_and_pr='
    local pr
    local owner_repo
    ___parse_pr_init_owner_repo_and_pr_main || return
'

___x_cmd_gh_repo_pr_info() {
    param:scope     "github/$O"
    param:dsl       '
options:
    #1|--pr             "pr id"     <>:number
'
    param:run

    ___parse_pr_init_owner_repo_and_pr
    ___x_cmd_gh_get "/repos/${owner_repo}/pulls/$pr"
}


___x_cmd_gh_repo_pr_log() {
    param:scope     "github/$O"
    param:dsl       '
type:
    state  = desc asc
options:
    #1|--pr             "pr id"                 <>:number
    --sort              "sort"                  <>:state="desc"
'
    param:run

    ___parse_pr_init_owner_repo_and_pr
    ___x_cmd_gh_get "/repos/${owner_repo}/pulls/$pr/operate_logs" sort
}

___x_cmd_gh_repo_pr_commit() {
    param:scope     "github/$O"
    param:dsl       '
options:
    #1|--pr             "pr id"                <>
'
    param:run
    ___parse_pr_init_owner_repo_and_pr
    ___x_cmd_gh_get "/repos/${owner_repo}/pulls/$pr/commits"
}

___x_cmd_gh_repo_pr_view() {
    param:scope     "github/$O"
    param:dsl       '
options:
    #1|--pr             "pr id"         <>:number
'
    param:run

    ___parse_pr_init_owner_repo_and_pr

    http browse "https://github.com/${owner_repo}/pulls/$pr"
}

# EndSection

# Section: create update merge

___x_cmd_gh_repo_pr_create() {
    local O="${O:-GITHUB_DEFAULT}"
    param:scope     "github/$O"
    param:dsl       '
type:
    bool = true false
options:
    --repo                  "Repo name"                                                     <>:repo
    --title                 "pr title"                                                      <>
    --head                  "source branch. Format: [username:]<branch>"                    <>:name
    --base                  "target branch. Format: [username:]<branch>"                    <>:name
    --body                  "pull request content"                                          <>=""
    --maintainer_can_modify "Indicates whether maintainers can modify the pull request."    <>:Bool=true
    --draft                 "Indicates whether the pull request is a draft"                 <>=""
    --issue                 "association issue"                                             <>=""
'
    param:run

    ___x_cmd_gh_param_init_owner_repo

    ___x_cmd_gh_post_json "/repos/$owner_repo/pulls" title head base body maintainer_can_modify \
        draft issue
}

___x_cmd_gh_repo_pr_update() {
    local O="${O:-GITHUB_DEFAULT}"
    param:scope     "github/$O"
##TODO:state
    param:dsl       '
type:
    state = closed
options:
    #1|--pr                 "pr number"                                 <>:number
    --title                 "pr title"                                  <>
    --body                  "pull request content"                      <>=""
    --milestone_number      "milestone number"                          <>:numbers=""
    --labels                "labels"                                    <>=""
    --assignees_number      "minimum number of reviewers"               <>:numbers=""
    --testers_number        "minimum test number"                       <>:numbers=""
    --state                 "state"                                     <>:state="closed"
'
    param:run

    ___parse_pr_init_owner_repo_and_pr
    ___x_cmd_gh_patch_json "/repos/${owner_repo}/pulls/$pr" title body milestone_number\
        labels assignees_number testers_number state
}

___x_cmd_gh_repo_pr_merge() {
    param:scope     "github/$O"
    param:dsl       '
type:
    merge = squash  merge
options:
    #1|--pr                 "pr id"                                     <>
    --merge_method          "merge method(squash,merge)"                <>:merge="merge"
    --prune_source_branch   "prune source branch"                       <>:bool="false"
    --title                 "title"                                     <>=""
    --description           "description"                               <>=""
'
    param:run

    ___parse_pr_init_owner_repo_and_pr
    ___x_cmd_gh_put_json "/repos/${owner_repo}/pulls/$pr/merge"  merge_method \
        prune_source_branch title description
}

# EndSection



