# shellcheck shell=sh
# shellcheck disable=SC2039,3043

############################
# Section 2: Wrapping std/http module with object naming changing
############################
______x_cmd_gt_resp_header() {
    http "@___x_cmd_gt_${O:-GITEE_DEFAULT}" resp header "$@"
}

# TODO: Not supported yet
______x_cmd_gt_resp_body() {
    http "@___x_cmd_gt_${O:-GITEE_DEFAULT}" resp body "$@"
}

______x_cmd_gt_get() {
    http "@___x_cmd_gt_${O:-GITEE_DEFAULT}" get "$@"
}

______x_cmd_gt_get_multi() {
    if [ -n "$page" ] || [ -n "$per_page" ]; then
        ______x_cmd_gt_get "$@" page per_page
        return "$?"
    fi
    local i=1
    local total_page=100000
    while [ "$i" -le "$total_page" ]; do
        ______x_cmd_gt_get "$@" page="$i" per_page=100
        total_page="$(______x_cmd_gt_resp_header "total_page")"
        [ -z "$total_page" ] && return
        # echo "total_page:$total_page" >&2
        i=$((i+1))
    done
}

______x_cmd_gt_post_json() {
    http "@___x_cmd_gt_${O:-GITEE_DEFAULT}" post    json "$@"
}

______x_cmd_gt_put_json() {
    http "@___x_cmd_gt_${O:-GITEE_DEFAULT}" put     json "$@"
}

______x_cmd_gt_patch_json() {
    http "@___x_cmd_gt_${O:-GITEE_DEFAULT}" patch   json "$@"
}

______x_cmd_gt_delete() {
    http "@___x_cmd_gt_${O:-GITEE_DEFAULT}" delete "$@"
}

______x_cmd_gt_dict_get() {
    http "@___x_cmd_gt_${O:-GITEE_DEFAULT}" dict "$@"
}

______x_cmd_gt_dict_put() {
    http "@___x_cmd_gt_${O:-GITEE_DEFAULT}" dict "$@"
}


############################
# Section 3: Parameter Utilities
############################

alias ___x_cmd_gt_param_init_owner_repo='
    local owner_repo
    ______x_cmd_gt_param_normalize_repo  || return
'

______x_cmd_gt_param_normalize_repo() {
    local op="$repo"
    [ -z "$op" ] && op="$1"
    case "$op" in
    */*)
        owner_repo="$(printf "%s" "$op")"
        ;;
    "")
        local _owner
        local _repo
        _owner="$(___x_cmd_gt_current_owner)"
        if [ -z "$_owner" ]; then
            printf "No owner provided. Default owner NOT set.\n" >&2
            return 1
        fi

        _repo="$(___x_cmd_gt_current_repo)"
        if [ -z "$_repo" ]; then
            printf "No repo provided. Default repo NOT set.\n" >&2
            return 1
        fi

        owner_repo="$(printf "%s/%s" "$_owner" "$_repo")"
        ;;
    *)
        local _owner
        _owner="$(___x_cmd_gt_current_owner)"
        if [ -z "$_owner" ]; then
            printf "No owner provided. Default owner not set.\n" >&2
        fi
        owner_repo="$(printf "%s" "$_owner/$op")"
        ;;
    esac
}

### Repo #1

______x_cmd_gt_parse_owner_repo() {
    local O="${O:-GITEE_DEFAULT}"
    if [ -z "$repo" ]; then
        repo="$(___x_cmd_gt_current_repo)"
    fi
    # if [[ "$repo" = */* ]]; then
    if str_regex "$repo" "/"; then
        owner=${repo%%/*}
        repo=${repo##*/}
    fi
    if [ -z "$owner" ]; then
        owner="$(___x_cmd_gt_current_owner)"
    fi
}

___x_cmd_gt_json_query(){
    local awkfile
    awkfile="$(xrc cat awk/lib/default.awk awk/lib/json.awk awk/lib/jiter.awk )"
    local data="$1"
    shift
    while [ $# -gt 0 ];do
    printf "%s" "$data"| awk "$awkfile""
{
    jiter_print_eqarr_after_tokenize(\$0,\"$1\", \"\n\")
}"
    shift
    done
}

___x_cmd_gt_json_query_rename(){
    local data="$1"
    shift
    while [ $# -gt 0 ];do
        eval "${1%%=*}"="$(___x_cmd_gt_json_query "$data" "${1##*=}")"
        shift
    done
}

___x_cmd_gt_default(){
    param_default "$@" 2>/dev/null || return 1
}


# ui printf untils tool
___x_cmd_gt_printf_command_log() {
    local ___X_CMD_LOG_COLORIZED_MSG="\\033[90m"
    gt_log "info" "==> " "$@"
}
